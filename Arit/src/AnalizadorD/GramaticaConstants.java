/* Generated By:JavaCC: Do not edit this line. GramaticaConstants.java */
package AnalizadorD;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GramaticaConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER = 7;
  /** RegularExpression Id. */
  int NUMERIC = 8;
  /** RegularExpression Id. */
  int PYCOMA = 9;
  /** RegularExpression Id. */
  int MAS = 10;
  /** RegularExpression Id. */
  int MENOS = 11;
  /** RegularExpression Id. */
  int POR = 12;
  /** RegularExpression Id. */
  int DIV = 13;
  /** RegularExpression Id. */
  int COMA = 14;
  /** RegularExpression Id. */
  int POTENCIA = 15;
  /** RegularExpression Id. */
  int MODULO = 16;
  /** RegularExpression Id. */
  int PAR_A = 17;
  /** RegularExpression Id. */
  int PAR_C = 18;
  /** RegularExpression Id. */
  int COR_A = 19;
  /** RegularExpression Id. */
  int COR_C = 20;
  /** RegularExpression Id. */
  int LLAV_A = 21;
  /** RegularExpression Id. */
  int LLAV_C = 22;
  /** RegularExpression Id. */
  int IGUAL = 23;
  /** RegularExpression Id. */
  int DISTINTO = 24;
  /** RegularExpression Id. */
  int IGUAL_IGUAL = 25;
  /** RegularExpression Id. */
  int MAYOR_I = 26;
  /** RegularExpression Id. */
  int MENOR_I = 27;
  /** RegularExpression Id. */
  int MAYOR = 28;
  /** RegularExpression Id. */
  int MENOR = 29;
  /** RegularExpression Id. */
  int AND = 30;
  /** RegularExpression Id. */
  int OR = 31;
  /** RegularExpression Id. */
  int NOT = 32;
  /** RegularExpression Id. */
  int BOOLEANO = 33;
  /** RegularExpression Id. */
  int IF = 34;
  /** RegularExpression Id. */
  int ELSE = 35;
  /** RegularExpression Id. */
  int SWITCH = 36;
  /** RegularExpression Id. */
  int DO = 37;
  /** RegularExpression Id. */
  int WHILE = 38;
  /** RegularExpression Id. */
  int CASE = 39;
  /** RegularExpression Id. */
  int PREGUNTA = 40;
  /** RegularExpression Id. */
  int NULO = 41;
  /** RegularExpression Id. */
  int TDEFAULT = 42;
  /** RegularExpression Id. */
  int DOSPUNTOS = 43;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 44;
  /** RegularExpression Id. */
  int STRING = 47;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int STRING_STATE = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER>",
    "<NUMERIC>",
    "\";\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\",\"",
    "\"^\"",
    "\"%%\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\"!=\"",
    "\"==\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "<BOOLEANO>",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"do\"",
    "\"while\"",
    "\"case\"",
    "\"?\"",
    "\"null\"",
    "\"default\"",
    "\":\"",
    "<IDENTIFICADOR>",
    "\"\\\"\"",
    "<token of kind 46>",
    "\"\\\"\"",
  };

}
