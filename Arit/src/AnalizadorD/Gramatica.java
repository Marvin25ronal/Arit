/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
package AnalizadorD;
import java.util.LinkedList;
import Reportes.Errores;
import Reportes.Errores.TipoError;
import java.util.ArrayList;
import Expresion.*;
import Expresion.TipoExp.Tipos;
import AST.*;
import Instruccion.Instruccion;
import Instruccion.*;
import Instruccion.Print;
import Objetos.Nulo;
import Operaciones.Aritmeticas;
import Operaciones.Operacion;
import Operaciones.Logicas;
import Operaciones.Relacional;
import Instruccion.DecAsig;
import Expresion.Identificador;
import Operaciones.Ternarias;
import Operaciones.Unarias;
import Control.*;
public class Gramatica implements GramaticaConstants {

  final public AST INICIO() throws ParseException {
AST arbol;
LinkedList<Nodo>lista=new LinkedList();
Nodo aux;
    label_1:
    while (true) {
      aux = CUERPO();
                      lista.add(aux);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SWITCH:
      case DO:
      case WHILE:
      case FOR:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
                                               arbol=new AST(lista);{if (true) return arbol;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo CUERPO() throws ParseException {
Nodo aux;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SWITCH:
      case DO:
      case WHILE:
      case FOR:
        aux = CONTROLES();
                  {if (true) return aux;}
        break;
      case IDENTIFICADOR:
        aux = DECLARACION();
                             {if (true) return aux;}
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException x) {
                        Token matchedToken = x.currentToken.next;
                Globales.VarGlobales.getInstance().AgregarEU(new Errores(Errores.TipoError.SINTACTICO,"Caracter no esperado "+matchedToken.image ,matchedToken.beginLine,matchedToken.beginColumn));
                error_skypto();
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

/*
█▀▄ █░░ ▄▀▄ ▄▀█ █░█ █▀▀ 
█▀█ █░▄ █░█ █░█ █░█ █▀▀ 
▀▀░ ▀▀▀ ░▀░ ░▀█ ░▀░ ▀▀▀ 
*/
  final public void error_skypto() throws ParseException {
        ParseException e=generateParseException();
        Token t;
                 do{
                t=getNextToken();
                System.out.println("EERorr  "+t.image);
        }while(!(t.kind == PYCOMA || t.kind == LLAV_C));
  }

  final public LinkedList<Nodo> BLOQUE() throws ParseException {
        LinkedList<Nodo>lista=new LinkedList();
        Nodo aux=null;
    jj_consume_token(LLAV_A);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SWITCH:
      case DO:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case FOR:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      aux = CUERPOINTERNO();
                                      lista.add(aux);
    }
    jj_consume_token(LLAV_C);
                                                                  {if (true) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public Nodo CUERPOINTERNO() throws ParseException {
Nodo aux;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SWITCH:
      case DO:
      case WHILE:
      case FOR:
        aux = CONTROLES();
                                  {if (true) return aux;}
        break;
      case IDENTIFICADOR:
        aux = DECLARACION();
                             {if (true) return aux;}
        break;
      case BREAK:
      case CONTINUE:
        aux = TRANFERENCIAS();
                               {if (true) return aux;}
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException x) {
                Token matchedToken = x.currentToken.next;
                Globales.VarGlobales.getInstance().AgregarEU(new Errores(Errores.TipoError.SINTACTICO,"Caracter no esperado "+matchedToken.image ,matchedToken.beginLine,matchedToken.beginColumn));
                error_skypto();
                {if (true) return null;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Nodo DECLARACION() throws ParseException {
        Token i;
        LinkedList<Expresion>par=new LinkedList();
        LinkedList<Expresion>dim=new LinkedList();
        LinkedList<Nodo>blo=new LinkedList();
        LinkedList<Object>fun=new LinkedList();
        Expresion e;
    if (jj_2_1(7)) {
      i = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      jj_consume_token(PAR_A);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        fun = LISTAPARAMETROS();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      jj_consume_token(PAR_C);
      jj_consume_token(IGUAL_MAYOR);
      blo = BLOQUE();
                                                                                                                {if (true) return new DecFuncion(fun,new Identificador(i.image,i.beginLine,i.beginColumn),blo,i.beginLine,i.beginColumn);}
    } else if (jj_2_2(3)) {
      i = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      e = EXP();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PYCOMA:
        jj_consume_token(PYCOMA);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
                                                                   {if (true) return new DecAsig(e,new Identificador(i.image,i.beginLine,i.beginColumn),i.beginLine,i.beginColumn);}
    } else if (jj_2_3(3)) {
      i = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(IGUAL);
      jj_consume_token(FUNCTION);
      jj_consume_token(PAR_A);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        fun = LISTAPARAMETROS();
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(PAR_C);
      blo = BLOQUE();
                                                                                                             {if (true) return new DecFuncion(fun,new Identificador(i.image,i.beginLine,i.beginColumn),blo,i.beginLine,i.beginColumn);}
    } else if (jj_2_4(2)) {
      i = jj_consume_token(IDENTIFICADOR);
      dim = LCORCHETES();
      jj_consume_token(IGUAL);
      e = EXP();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PYCOMA:
        jj_consume_token(PYCOMA);
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
                                                                                    {if (true) return new AsignacionPosicion(new Acceso(new Identificador(i.image,i.beginLine,i.beginColumn),dim,i.beginLine,i.beginColumn),e,i.beginLine,i.beginColumn);}
    } else if (jj_2_5(2)) {
      i = jj_consume_token(IDENTIFICADOR);
      jj_consume_token(PAR_A);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case NUMERIC:
      case MENOS:
      case PAR_A:
      case NOT:
      case BOOLEANO:
      case NULO:
      case TDEFAULT:
      case IDENTIFICADOR:
      case STRING:
        par = LISTAEXP();
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(PAR_C);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PYCOMA:
        jj_consume_token(PYCOMA);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
                                                                                  {if (true) return new Llamadas(new Identificador(i.image,i.beginLine,i.beginColumn),par,dim);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<Object> LISTAPARAMETROS() throws ParseException {
        LinkedList<Object>lista=new LinkedList();
        Object a;
    a = PARAMETROS();
                       lista.add(a);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMA);
      a = PARAMETROS();
                                                            lista.add(a);
    }
                                                                              {if (true) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public Object PARAMETROS() throws ParseException {
        Token t;
        Expresion e;
    t = jj_consume_token(IDENTIFICADOR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IGUAL:
      jj_consume_token(IGUAL);
      e = EXP();
                                          {if (true) return new DecAsig(e,new Identificador(t.image,t.beginLine,t.beginColumn),t.beginLine,t.beginColumn);}
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
                                                                                                                                                   {if (true) return new Identificador(t.image,t.beginLine,t.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<Expresion> LCORCHETES() throws ParseException {
        LinkedList<Expresion>l=new LinkedList();
        Expresion e;
    label_4:
    while (true) {
      e = CORCHETES();
                       l.add(e);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COR_A:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
    }
                                    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion CORCHETES() throws ParseException {
        Expresion aux;
    aux = ACCESOS();
                        {if (true) return aux;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ACCESOS() throws ParseException {
        Expresion e,d;
        Token t;
    if (jj_2_6(3)) {
      t = jj_consume_token(COR_A);
      e = EXP();
      jj_consume_token(COR_C);
                                                {if (true) return new AccesoUnico(e,t.beginLine,t.beginColumn);}
    } else if (jj_2_7(2)) {
      t = jj_consume_token(COR_A);
      jj_consume_token(COR_A);
      e = EXP();
      jj_consume_token(COR_C);
      jj_consume_token(COR_C);
                                                                {if (true) return new AccesoDoble(e,t.beginLine,t.beginColumn);}
    } else if (jj_2_8(4)) {
      t = jj_consume_token(COR_A);
      e = EXP();
      jj_consume_token(COMA);
      d = EXP();
      jj_consume_token(COR_C);
                                                               {if (true) return new Acceso4(e,d,t.beginLine,t.beginColumn);}
    } else if (jj_2_9(2)) {
      t = jj_consume_token(COR_A);
      jj_consume_token(COMA);
      d = EXP();
      jj_consume_token(COR_C);
                                                       {if (true) return new Acceso4(null,d,t.beginLine,t.beginColumn);}
    } else if (jj_2_10(4)) {
      t = jj_consume_token(COR_A);
      e = EXP();
      jj_consume_token(COMA);
      jj_consume_token(COR_C);
                                                       {if (true) return new Acceso4(e,null,t.beginLine,t.beginColumn);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Instruccion TRANFERENCIAS() throws ParseException {
        Token i;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BREAK:
      i = jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PYCOMA:
        jj_consume_token(PYCOMA);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
                              {if (true) return new Break(i.beginLine,i.beginColumn);}
      break;
    case CONTINUE:
      i = jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PYCOMA:
        jj_consume_token(PYCOMA);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
                                 {if (true) return new Continue(i.beginLine,i.beginColumn);}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Instruccion CONTROLES() throws ParseException {
        Instruccion ins=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      ins = CONTROL_IF();
                         {if (true) return ins;}
      break;
    case SWITCH:
      ins = CONTROL_SWITCH();
                              {if (true) return ins;}
      break;
    case DO:
      ins = CONTROL_DO_WHILE();
                                {if (true) return ins;}
      break;
    case WHILE:
      ins = CONTROL_WHILE();
                             {if (true) return ins;}
      break;
    case FOR:
      ins = CONTROL_FOR();
                           {if (true) return ins;}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Instruccion CONTROL_FOR() throws ParseException {
        Token i,id;
        Expresion e;
        LinkedList<Nodo>blo;
    i = jj_consume_token(FOR);
    jj_consume_token(PAR_A);
    id = jj_consume_token(IDENTIFICADOR);
    jj_consume_token(IN);
    e = EXP();
    jj_consume_token(PAR_C);
    blo = BLOQUE();
                                                                             {if (true) return new For(new Identificador(id.image,id.beginLine,id.beginColumn),e,blo,i.beginLine,i.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion CONTROL_WHILE() throws ParseException {
        Token i;
        Expresion e;
        LinkedList<Nodo>blo;
    i = jj_consume_token(WHILE);
    jj_consume_token(PAR_A);
    e = EXP();
    jj_consume_token(PAR_C);
    blo = BLOQUE();
                                                       {if (true) return new While(e,blo,i.beginLine,i.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion CONTROL_DO_WHILE() throws ParseException {
        Expresion e;
        Token i;
        LinkedList<Nodo>blo;
    i = jj_consume_token(DO);
    blo = BLOQUE();
    jj_consume_token(WHILE);
    jj_consume_token(PAR_A);
    e = EXP();
    jj_consume_token(PAR_C);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PYCOMA:
      jj_consume_token(PYCOMA);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
                                                                         {if (true) return new Do_While(e,blo,i.beginLine,i.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion CONTROL_SWITCH() throws ParseException {
        Token i;
        Expresion e;
        LinkedList<Instruccion>Lcase=new LinkedList();
    i = jj_consume_token(SWITCH);
    jj_consume_token(PAR_A);
    e = EXP();
    jj_consume_token(PAR_C);
    jj_consume_token(LLAV_A);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CASE:
      Lcase = LCASE();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(LLAV_C);
                                                                              {if (true) return new Switch(e,Lcase,i.beginLine,i.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<Instruccion> LCASE() throws ParseException {
        Instruccion i;
        LinkedList<Instruccion>ins=new LinkedList();
    label_5:
    while (true) {
      i = CASE();
                   ins.add(i);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_5;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TDEFAULT:
      i = CDEFAULT();
                                                ins.add(i);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
                                                                {if (true) return ins;}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion CASE() throws ParseException {
        Token i;
        Expresion exp;
        LinkedList<Nodo>blo=new LinkedList();
        Nodo aux;
    i = jj_consume_token(CASE);
    exp = EXP();
    jj_consume_token(DOSPUNTOS);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SWITCH:
      case DO:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case FOR:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_6;
      }
      aux = CUERPOINTERNO();
                                                            blo.add(aux);
    }
                                                                              {if (true) return new Case(exp,blo,i.beginLine,i.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion CDEFAULT() throws ParseException {
        Token i;
        LinkedList<Nodo>blo=new LinkedList();
        Nodo aux;
    i = jj_consume_token(TDEFAULT);
    jj_consume_token(DOSPUNTOS);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case SWITCH:
      case DO:
      case WHILE:
      case BREAK:
      case CONTINUE:
      case FOR:
      case IDENTIFICADOR:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      aux = CUERPOINTERNO();
                                                      blo.add(aux);
    }
                                                                        {if (true) return new Else(blo,i.beginLine,i.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Instruccion CONTROL_IF() throws ParseException {
        Token i,el,tel;
        Instruccion ins;
        LinkedList<Instruccion>Lifs=new LinkedList();
        Expresion condi;
        LinkedList<Nodo>blo,bloelse;
    i = jj_consume_token(IF);
    jj_consume_token(PAR_A);
    condi = EXP();
    jj_consume_token(PAR_C);
    blo = BLOQUE();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      if (jj_2_11(2)) {
        el = jj_consume_token(ELSE);
        ins = CONTROL_IF();
                        LinkedList<Instruccion>aux=((IF)ins).getLifs();
                        Expresion condicionNueva=((IF)ins).getCondicion();
                        LinkedList<Nodo>bloqueelse=((IF)ins).getSentencias();
                        ElseIf nuevo=new ElseIf(condicionNueva,bloqueelse,el.beginLine,el.beginColumn);
                        Lifs.add(nuevo);
                        for(Instruccion n : aux){
                                Lifs.add(n);
                        }
      } else if (jj_2_12(2)) {
        tel = jj_consume_token(ELSE);
        bloelse = BLOQUE();
                                                          Lifs.add(new Else(bloelse,tel.beginLine,tel.beginColumn));
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
         {if (true) return new IF(condi,blo,Lifs,i.beginLine,i.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public LinkedList<Expresion> LISTAEXP() throws ParseException {
        LinkedList<Expresion>lista=new LinkedList();
        Expresion e;
        Token d;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case NUMERIC:
    case MENOS:
    case PAR_A:
    case NOT:
    case BOOLEANO:
    case NULO:
    case IDENTIFICADOR:
    case STRING:
      e = EXP();
                 lista.add(e);
      break;
    case TDEFAULT:
      d = jj_consume_token(TDEFAULT);
                                             lista.add(new Default(d.beginLine,d.beginColumn));
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
      case TDEFAULT:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        jj_consume_token(COMA);
        e = EXP();
                                                                                                                  lista.add(e);
        break;
      case TDEFAULT:
        d = jj_consume_token(TDEFAULT);
                                                                                                                                               lista.add(new Default(d.beginLine,d.beginColumn));
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return lista;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion EXP() throws ParseException {
        Expresion a,b,c;
        Token t;
    a = CondicionOR();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREGUNTA:
      t = jj_consume_token(PREGUNTA);
      b = EXP();
      jj_consume_token(DOSPUNTOS);
      c = EXP();
                                                              {if (true) return new Ternarias(a,b,c,t.beginLine,t.beginColumn);}
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion CondicionOR() throws ParseException {
        Expresion a,b;
        Token t;
    a = CondicionAnd();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
      t = jj_consume_token(OR);
      b = CondicionAnd();
                                                a=new Logicas(a,b,Operacion.Operador.OR,t.beginLine,t.beginColumn);
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion CondicionAnd() throws ParseException {
Expresion a,b;
        Token t;
    a = ExpresionIgualdad();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_10;
      }
      t = jj_consume_token(AND);
      b = ExpresionIgualdad();
                                                           a=new Logicas(a,b,Operacion.Operador.AND,t.beginLine,t.beginColumn);
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ExpresionIgualdad() throws ParseException {
Expresion a,b;
        Token t;
    a = ExpresionRelacional();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINTO:
      case IGUAL_IGUAL:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IGUAL_IGUAL:
        t = jj_consume_token(IGUAL_IGUAL);
        b = ExpresionRelacional();
                                                                        a=new Relacional(a,b,Operacion.Operador.IGUAL_IGUAL,t.beginLine,t.beginColumn);
        break;
      case DISTINTO:
        t = jj_consume_token(DISTINTO);
        b = ExpresionRelacional();
                                               a=new Relacional(a,b,Operacion.Operador.DISTINTO,t.beginLine,t.beginColumn);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ExpresionRelacional() throws ParseException {
        Expresion a,b;
        Token t;
    a = ExpresionAditiva();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYOR_I:
      case MENOR_I:
      case MAYOR:
      case MENOR:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYOR:
        t = jj_consume_token(MAYOR);
        b = ExpresionAditiva();
                                               a=new Relacional(a,b,Operacion.Operador.MAYOR,t.beginLine,t.beginColumn);
        break;
      case MENOR:
        t = jj_consume_token(MENOR);
        b = ExpresionAditiva();
                                                a=new Relacional(a,b,Operacion.Operador.MENOR,t.beginLine,t.beginColumn);
        break;
      case MAYOR_I:
        t = jj_consume_token(MAYOR_I);
        b = ExpresionAditiva();
                                                 a=new Relacional(a,b,Operacion.Operador.MAYOR_IGUAL,t.beginLine,t.beginColumn);
        break;
      case MENOR_I:
        t = jj_consume_token(MENOR_I);
        b = ExpresionAditiva();
                                                 a=new Relacional(a,b,Operacion.Operador.MENOR_IGUAL,t.beginLine,t.beginColumn);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ExpresionAditiva() throws ParseException {
        Expresion a,b;
        Token t;
    a = ExpresionMultiplicativas();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        t = jj_consume_token(MAS);
        b = ExpresionMultiplicativas();
                                                    a=new Aritmeticas(a,b,Operacion.Operador.SUMA,t.beginLine,t.beginColumn);
        break;
      case MENOS:
        t = jj_consume_token(MENOS);
        b = ExpresionMultiplicativas();
                                                       a=new Aritmeticas(a,b,Operacion.Operador.RESTA,t.beginLine,t.beginColumn);
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ExpresionMultiplicativas() throws ParseException {
Expresion a,b;
 Token t;
    a = ExpresionUnaria();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case DIV:
      case POTENCIA:
      case MODULO:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_14;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        t = jj_consume_token(POR);
        b = ExpresionUnaria();
                                            a=new Aritmeticas(a,b,Operacion.Operador.MULTIPLICACION,t.beginLine,t.beginColumn);
        break;
      case DIV:
        t = jj_consume_token(DIV);
        b = ExpresionUnaria();
                                            a=new Aritmeticas(a,b,Operacion.Operador.DIVISION,t.beginLine,t.beginColumn);
        break;
      case POTENCIA:
        t = jj_consume_token(POTENCIA);
        b = ExpresionUnaria();
                                                 a=new Aritmeticas(a,b,Operacion.Operador.POTENCIA,t.beginLine,t.beginColumn);
        break;
      case MODULO:
        t = jj_consume_token(MODULO);
        b = ExpresionUnaria();
                                               a=new Aritmeticas(a,b,Operacion.Operador.MODULO,t.beginLine,t.beginColumn);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Expresion ExpresionUnaria() throws ParseException {
        Expresion exp,a;
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOS:
      t = jj_consume_token(MENOS);
      exp = ExpresionUnaria();
                                       {if (true) return new Unarias(exp,null,Operacion.Operador.RESTA,t.beginLine,t.beginColumn);}
      break;
    case NOT:
      t = jj_consume_token(NOT);
      exp = ExpresionUnaria();
                                      {if (true) return new Unarias(exp,null,Operacion.Operador.NOT,t.beginLine,t.beginColumn);}
      break;
    case INTEGER:
    case NUMERIC:
    case PAR_A:
    case BOOLEANO:
    case NULO:
    case IDENTIFICADOR:
    case STRING:
      exp = Primitivo();
                         {if (true) return exp;}
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expresion Primitivo() throws ParseException {
        Expresion aux;
        Token i;
        LinkedList<Expresion>dim=new LinkedList(),lex=new LinkedList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERIC:
      jj_consume_token(NUMERIC);
                  {if (true) return new Literal(Double.parseDouble(token.image),new TipoExp(Tipos.NUMERIC),token.beginLine,token.beginColumn);}
      break;
    case BOOLEANO:
      jj_consume_token(BOOLEANO);
                    {if (true) return new Literal(Boolean.parseBoolean(token.image),new TipoExp(Tipos.BOOLEAN),token.beginLine,token.beginColumn);}
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
                   {if (true) return new Literal(Integer.parseInt(token.image),new TipoExp(Tipos.INTEGER),token.beginLine,token.beginColumn);}
      break;
    case STRING:
      jj_consume_token(STRING);
                  {if (true) return new Literal(token.image.substring(1,token.image.length()-1),new TipoExp(Tipos.STRING),token.beginLine,token.beginColumn);}
      break;
    default:
      jj_la1[41] = jj_gen;
      if (jj_2_13(3)) {
        i = jj_consume_token(IDENTIFICADOR);
        jj_consume_token(PAR_A);
        jj_consume_token(PAR_C);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COR_A:
          dim = LCORCHETES();
          break;
        default:
          jj_la1[39] = jj_gen;
          ;
        }
                                                                           {if (true) return new Llamadas(new Identificador(i.image,i.beginLine,i.beginColumn),lex,dim);}
      } else if (jj_2_14(3)) {
        i = jj_consume_token(IDENTIFICADOR);
        jj_consume_token(PAR_A);
        lex = LISTAEXP();
        jj_consume_token(PAR_C);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COR_A:
          dim = LCORCHETES();
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
                                                                                          {if (true) return new Llamadas(new Identificador(i.image,i.beginLine,i.beginColumn),lex,dim);}
      } else if (jj_2_15(2)) {
        i = jj_consume_token(IDENTIFICADOR);
        dim = LCORCHETES();
                                                        {if (true) return new Acceso(new Identificador(i.image,i.beginLine,i.beginColumn),dim,i.beginLine,i.beginColumn);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          i = jj_consume_token(IDENTIFICADOR);
                           {if (true) return new Identificador(i.image,i.beginLine,i.beginColumn);}
          break;
        case PAR_A:
          jj_consume_token(PAR_A);
          aux = EXP();
          jj_consume_token(PAR_C);
                                   {if (true) return aux;}
          break;
        case NULO:
          jj_consume_token(NULO);
                {if (true) return new  Nulo(token.beginLine,token.beginColumn);}
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_3R_35() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(LLAV_A)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LLAV_C)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(NULO)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(PAR_C)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PAR_A)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PAR_A)) return true;
    if (jj_scan_token(PAR_C)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(BOOLEANO)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(NUMERIC)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(MENOS)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(MODULO)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(POTENCIA)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(POR)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_67()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(MENOS)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(MAS)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_61()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(MENOR_I)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(IGUAL_IGUAL)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(MAYOR_I)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(MENOR)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(MAYOR)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(COMA)) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COMA)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_scan_token(COR_A)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(COR_A)) return true;
    if (jj_3R_17()) return true;
    if (jj_scan_token(COR_C)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_scan_token(DISTINTO)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    if (jj_3R_24()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(PREGUNTA)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(TDEFAULT)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_31()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(PAR_A)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_23()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFICADOR)) return true;
    if (jj_scan_token(IGUAL)) return true;
    if (jj_scan_token(PAR_A)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) jj_scanpos = xsp;
    if (jj_scan_token(PAR_C)) return true;
    if (jj_scan_token(IGUAL_MAYOR)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x200,0x20980,0x200,0x4000,0x800000,0x80000,0x200,0x200,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x20980,0x4000,0x4000,0x0,0x0,0x80000000,0x3000000,0x3000000,0x5c000000,0x5c000000,0xc00,0xc00,0x1b000,0x1b000,0x20980,0x80000,0x80000,0x180,0x20000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x480e8,0x480e8,0x4b0e8,0x4b0e8,0x40000,0x0,0x40000,0x0,0x440c06,0x0,0x0,0x0,0x0,0x0,0x0,0x3000,0x80e8,0x0,0x100,0x100,0x800,0x4b0e8,0x4b0e8,0x10,0x440c06,0x800,0x800,0x200,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x440406,0x0,0x0,0x400004,0x40400,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[15];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
