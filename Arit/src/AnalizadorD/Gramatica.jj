options{
	IGNORE_CASE=true;
	STATIC=false;
	
}
PARSER_BEGIN(Gramatica)
package AnalizadorD;
import java.util.LinkedList;
import Reportes.Errores;
import Reportes.Errores.TipoError;
import java.util.ArrayList;
import Expresion.*;
import Expresion.TipoExp.Tipos;
import AST.*;
import Instruccion.Instruccion;
import Instruccion.*;
import Instruccion.Print;
import Objetos.Nulo;
import Operaciones.Aritmeticas;
import Operaciones.Operacion;
import Operaciones.Logicas;
import Operaciones.Relacional;
import Instruccion.DecAsig;
import Expresion.Identificador;
import Operaciones.Ternarias;
import Operaciones.Unarias;
import Control.*;
public class Gramatica{
	public String retirar(String t){
		t=t.replace("\\n","\n");
    	t=t.replace("\\t", "\t");
    	t=t.replace("\\\"", "\"");
    	t=t.replace("\\r", "\r");
    	t=t.replace("\\", "\\");
		return t;
	}
}
PARSER_END(Gramatica)
/*
██╗░░░░░███████╗██╗░░██╗██╗░█████╗░░█████╗░
██║░░░░░██╔════╝╚██╗██╔╝██║██╔══██╗██╔══██╗
██║░░░░░█████╗░░░╚███╔╝░██║██║░░╚═╝██║░░██║
██║░░░░░██╔══╝░░░██╔██╗░██║██║░░██╗██║░░██║
███████╗███████╗██╔╝╚██╗██║╚█████╔╝╚█████╔╝
╚══════╝╚══════╝╚═╝░░╚═╝╚═╝░╚════╝░░╚════╝░
*/
SKIP :{
	" "
	|"\t"
	|"\r"
	|"\n"
	|<"#" (~["\n", "\r"])*>
	|<"#*" (~["*"])* "*" ("*" | ~["*","#"] (~["*"])* "*")* "#">
}

TOKEN : {
	<INTEGER: (["0"-"9"])+>
	|<NUMERIC:(["0"-"9"])+"."(["0"-"9"])+>
	|<PYCOMA:";">
	|<MAS:"+">
	|<MENOS:"-">
	|<POR:"*">
	|<DIV:"/">
	|<COMA:",">
	|<POTENCIA:"^">
	|<MODULO:"%%">
	|<PAR_A:"(">
	|<PAR_C:")">
	|<COR_A:"[">
	|<COR_C:"]">
	|<LLAV_A:"{">
	|<LLAV_C:"}">
	|<IGUAL:"=">
	|<DISTINTO:"!=">
	|<IGUAL_IGUAL:"==">
	|<MAYOR_I:">=">
	|<MENOR_I:"<=">
	|<MAYOR:">">
	|<IGUAL_MAYOR:"=>">
	|<MENOR:"<">
	|<AND:"&">
	|<OR:"|">
	|<NOT:"!">
	|<BOOLEANO:"true"|"false">
	|<IF:"if">
	|<ELSE:"else">
	|<SWITCH:"switch">
	|<DO:"do">
	|<WHILE:"while">
	|<CASE:"case">
	|<PREGUNTA:"?">
	|<NULO: "null">
	|<TDEFAULT:"default">
	|<BREAK:"break">
	|<CONTINUE:"continue">
	|<FUNCTION:"function">
	|<FOR:"for">
	|<IN:"in">
	|<RETORNO:"return">
	|<DOSPUNTOS:":">
	//|<IDENTIFICADOR: ["a"-"z","A"-"Z", "_"] ( ["a"-"z","A"-"Z", "_"] | ["0"-"9"] )* >
	|<IDENTIFICADOR:(["A"-"Z","a"-"z","_"](["a"-"z","A"-"Z",".","_"]|["0"-"9"])*)|("." ["A"-"Z","a"-"z",".","_"](["a"-"z","A"-"Z","_","."]|["0"-"9"])*)|".">
	|<NOVAL: ~["a"-"z","0"-"9","-","\""]>//E.R. de caracteres no validos de este lenguaje
  {System.out.println("Error 1: \"Caracter no valido en linea "+matchedToken.beginLine+"\"");
  Globales.VarGlobales.getInstance().AgregarEU(new Errores(Errores.TipoError.LEXICO,"Caracter no valido "+matchedToken.image ,matchedToken.beginLine,matchedToken.beginColumn));
  }//Manda un mensaje de error en pantall
}
MORE:{
	"\"" : STRING_STATE
}
<STRING_STATE> MORE:
{
    <~["\""]> 
    | <("\\" "\"")>
    | <("\\" "n")>
    | <("\\" "\\")>
    | <("\\" "r")>
    | <("\\" "t")>
}
<STRING_STATE> TOKEN:{
	<STRING:"\""> : DEFAULT
}

AST INICIO():
{
AST arbol;
LinkedList<Nodo>lista=new LinkedList();
Nodo aux;
}
{
	(aux=CUERPO(){lista.add(aux);})+ <EOF>{arbol=new AST(lista);return arbol;}
}

Nodo CUERPO():
{
Nodo aux;
}
{
	try{
	(aux=CONTROLES()){return aux;}
	|(aux=DECLARACION()){return aux;}
	|(aux=RETORNOS()){return aux;}
	}catch(ParseException x){
		Token matchedToken = x.currentToken.next; 
		Globales.VarGlobales.getInstance().AgregarEU(new Errores(Errores.TipoError.SINTACTICO,"Caracter no esperado "+matchedToken.image ,matchedToken.beginLine,matchedToken.beginColumn));
		error_skypto();
		return null;
	}
}
/*
█▀▄ █░░ ▄▀▄ ▄▀█ █░█ █▀▀ 
█▀█ █░▄ █░█ █░█ █░█ █▀▀ 
▀▀░ ▀▀▀ ░▀░ ░▀█ ░▀░ ▀▀▀ 
*/
void error_skypto():
{
	ParseException e=generateParseException();
	Token t;
}
{
	{
		 do{
                t=getNextToken();
                System.out.println("EERorr  "+t.image);
        }while(!(t.kind == PYCOMA || t.kind == LLAV_C||t.kind==EOF));
	}
}


LinkedList<Nodo>BLOQUE():
{
	LinkedList<Nodo>lista=new LinkedList();
	Nodo aux=null;
}
{
	<LLAV_A> (aux=CUERPOINTERNO(){lista.add(aux);})* <LLAV_C>{return lista;}
}



Nodo CUERPOINTERNO():
{
Nodo aux;
}
{
	try{
	(aux=CONTROLES()){return aux;}
	|(aux=DECLARACION()){return aux;}
	|(aux=TRANFERENCIAS()){return aux;}
	|(aux=RETORNOS()){return aux;}
	}catch(ParseException x){
		Token matchedToken = x.currentToken.next; 
		Globales.VarGlobales.getInstance().AgregarEU(new Errores(Errores.TipoError.SINTACTICO,"Caracter no esperado "+matchedToken.image ,matchedToken.beginLine,matchedToken.beginColumn));
		error_skypto();
		return null;
	}	
}

Nodo DECLARACION():
{
	Token i;
	LinkedList<Expresion>par=new LinkedList();
	LinkedList<Expresion>dim=new LinkedList();
	LinkedList<Nodo>blo=new LinkedList();
	LinkedList<Object>fun=new LinkedList();
	Expresion e;
}
{
	LOOKAHEAD(7)i=<IDENTIFICADOR><IGUAL> <PAR_A> (fun=LISTAPARAMETROS())? <PAR_C><IGUAL_MAYOR> blo=BLOQUE(){return new DecFuncion(fun,new Identificador(i.image,i.beginLine,i.beginColumn),blo,i.beginLine,i.beginColumn);}
	|LOOKAHEAD(3)i=<IDENTIFICADOR> <IGUAL> e=EXP() (<PYCOMA>)?{return new DecAsig(e,new Identificador(i.image,i.beginLine,i.beginColumn),i.beginLine,i.beginColumn);}
	|LOOKAHEAD(3)i=<IDENTIFICADOR><IGUAL> <FUNCTION> <PAR_A> (fun=LISTAPARAMETROS())?<PAR_C>blo=BLOQUE(){return new DecFuncion(fun,new Identificador(i.image,i.beginLine,i.beginColumn),blo,i.beginLine,i.beginColumn);}
	|LOOKAHEAD(2)i=<IDENTIFICADOR> dim=LCORCHETES() <IGUAL> e=EXP() (<PYCOMA>)?{return new AsignacionPosicion(new Acceso(new Identificador(i.image,i.beginLine,i.beginColumn),dim,i.beginLine,i.beginColumn),e,i.beginLine,i.beginColumn);}
	|LOOKAHEAD(2)i=<IDENTIFICADOR><PAR_A>(par=LISTAEXP())?<PAR_C>(<PYCOMA>)? {return new Llamadas(new Identificador(i.image,i.beginLine,i.beginColumn),par,dim);}
	
}

Nodo RETORNOS():
{
	Token t;
	Expresion ex;
}
{
	LOOKAHEAD(5) t=<RETORNO> <PAR_A> ex=EXP() <PAR_C> (<PYCOMA>)?{return new Return(ex,t.beginLine,t.beginColumn);}
	//|LOOKAHEAD(3) t=<RETORNO> <PAR_A> ex=EXP() <PAR_C>{return new Return(ex,t.beginLine,t.beginColumn);}
	|LOOKAHEAD(2) t=<RETORNO> <PYCOMA>{return new Return(new Nulo(t.beginLine,t.beginColumn),t.beginLine,t.beginColumn);}
	|t=<RETORNO>{return new Return(new Nulo(t.beginLine,t.beginColumn),t.beginLine,t.beginColumn);} 
	
}

LinkedList<Object> LISTAPARAMETROS():
{
	LinkedList<Object>lista=new LinkedList();
	Object a;
}
{
	a=PARAMETROS(){lista.add(a);}(<COMA> a=PARAMETROS(){lista.add(a);})* {return lista;}
}
Object PARAMETROS():
{
	Token t;
	Expresion e;
}
{
	t=<IDENTIFICADOR>(<IGUAL> e=EXP(){return new DecAsig(e,new Identificador(t.image,t.beginLine,t.beginColumn),t.beginLine,t.beginColumn);})?{return new Identificador(t.image,t.beginLine,t.beginColumn);}
}

LinkedList<Expresion>LCORCHETES():
{
	LinkedList<Expresion>l=new LinkedList();
	Expresion e;
}
{
	(e=CORCHETES(){l.add(e);})+{return l;}
}

Expresion CORCHETES():
{
	Expresion aux;
	
}
{
	(aux=ACCESOS()){return aux;}
}

Expresion ACCESOS():
{
	Expresion e,d;
	Token t;
}
{
	LOOKAHEAD(100) t=<COR_A> e=EXP() <COR_C> {return new AccesoUnico(e,t.beginLine,t.beginColumn);}
	|LOOKAHEAD(120) t=<COR_A> e=EXP() <COMA> d=EXP() <COR_C>{return new Acceso4(e,d,t.beginLine,t.beginColumn);}
	|LOOKAHEAD(90) t=<COR_A> e=EXP() <COMA> <COR_C>{return new Acceso4(e,null,t.beginLine,t.beginColumn);}
	|LOOKAHEAD(2) t=<COR_A> <COR_A> e=EXP() <COR_C> <COR_C>{return new AccesoDoble(e,t.beginLine,t.beginColumn);}
	|LOOKAHEAD(2) t=<COR_A> <COMA> d=EXP() <COR_C>{return new Acceso4(null,d,t.beginLine,t.beginColumn);}
	
}

Instruccion TRANFERENCIAS():
{
	Token i;
}
{
	i=<BREAK> (<PYCOMA>)?{return new Break(i.beginLine,i.beginColumn);}
	|i=<CONTINUE>(<PYCOMA>)?{return new Continue(i.beginLine,i.beginColumn);}
}

Instruccion CONTROLES():
{
	Instruccion ins=null;
}
{	
	ins=CONTROL_IF(){return ins;}
	|ins=CONTROL_SWITCH(){return ins;}
	|ins=CONTROL_DO_WHILE(){return ins;}
	|ins=CONTROL_WHILE(){return ins;}
	|ins=CONTROL_FOR(){return ins;}
}

Instruccion CONTROL_FOR():
{
	Token i,id;
	Expresion e;
	LinkedList<Nodo>blo;
}
{
	i=<FOR> <PAR_A> id=<IDENTIFICADOR> <IN> e=EXP() <PAR_C> blo=BLOQUE(){return new For(new Identificador(id.image,id.beginLine,id.beginColumn),e,blo,i.beginLine,i.beginColumn);}
}

Instruccion CONTROL_WHILE():
{
	Token i;
	Expresion e;
	LinkedList<Nodo>blo;
}
{
	i=<WHILE> <PAR_A> e=EXP() <PAR_C> blo=BLOQUE(){return new While(e,blo,i.beginLine,i.beginColumn);}
}

Instruccion CONTROL_DO_WHILE():
{
	Expresion e;
	Token i;
	LinkedList<Nodo>blo;
}
{
	i=<DO> blo=BLOQUE() <WHILE> <PAR_A> e=EXP() <PAR_C> (<PYCOMA>)? {return new Do_While(e,blo,i.beginLine,i.beginColumn);}
}	

Instruccion CONTROL_SWITCH():
{
	Token i;
	Expresion e;
	LinkedList<Instruccion>Lcase=new LinkedList();
}
{
	i=<SWITCH> <PAR_A> e=EXP() <PAR_C> <LLAV_A> (Lcase=LCASE())? <LLAV_C>{return new Switch(e,Lcase,i.beginLine,i.beginColumn);}
}

LinkedList<Instruccion>LCASE():
{
	Instruccion i;
	LinkedList<Instruccion>ins=new LinkedList();
}
{
	 (i=CASE(){ins.add(i);})+ (i=CDEFAULT(){ins.add(i);})? {return ins;}
}

Instruccion CASE():
{
	Token i;
	Expresion exp;
	LinkedList<Nodo>blo=new LinkedList();
	Nodo aux;
}
{
	i=<CASE> exp=EXP() <DOSPUNTOS> (aux=CUERPOINTERNO(){blo.add(aux);})* {return new Case(exp,blo,i.beginLine,i.beginColumn);}
}

Instruccion CDEFAULT():
{
	Token i;
	LinkedList<Nodo>blo=new LinkedList();
	Nodo aux;
}
{
	i=<TDEFAULT> <DOSPUNTOS> (aux=CUERPOINTERNO(){blo.add(aux);})* {return new Else(blo,i.beginLine,i.beginColumn);}
}


Instruccion CONTROL_IF():
{
	Token i,el,tel;
	Instruccion ins;
	LinkedList<Instruccion>Lifs=new LinkedList();
	Expresion condi;
	LinkedList<Nodo>blo,bloelse;
}
{
	i=<IF><PAR_A> condi=EXP() <PAR_C> blo=BLOQUE() 	
	(
		LOOKAHEAD(2) el=<ELSE> ins=CONTROL_IF()
		{
			LinkedList<Instruccion>aux=((IF)ins).getLifs();
			Expresion condicionNueva=((IF)ins).getCondicion();
			LinkedList<Nodo>bloqueelse=((IF)ins).getSentencias();
			ElseIf nuevo=new ElseIf(condicionNueva,bloqueelse,el.beginLine,el.beginColumn);
			Lifs.add(nuevo);
			for(Instruccion n : aux){
				Lifs.add(n);
			}
		}
		|LOOKAHEAD(2) tel=<ELSE> bloelse=BLOQUE(){Lifs.add(new Else(bloelse,tel.beginLine,tel.beginColumn));}
	)?
	{return new IF(condi,blo,Lifs,i.beginLine,i.beginColumn);}

}




LinkedList<Expresion>LISTAEXP():
{
	LinkedList<Expresion>lista=new LinkedList();
	Expresion e;
	Token d;
}
{
	(e=EXP(){lista.add(e);}|d=<TDEFAULT>{lista.add(new Default(d.beginLine,d.beginColumn));} )(<COMA> (e=EXP(){lista.add(e);}| d=<TDEFAULT>{lista.add(new Default(d.beginLine,d.beginColumn));}))*
	{return lista;}
}

Expresion EXP():
{
	Expresion a,b,c;
	Token t;
}
{
	a=CondicionOR()(t=<PREGUNTA>b=EXP()<DOSPUNTOS>c=EXP(){return new Ternarias(a,b,c,t.beginLine,t.beginColumn);}
		)?
	{return a;}
}
Expresion CondicionOR():
{
	Expresion a,b;
	Token t;
}
{
	a=CondicionAnd()(t=<OR>b=CondicionAnd(){a=new Logicas(a,b,Operacion.Operador.OR,t.beginLine,t.beginColumn);}

		)*
	{return a;}
}
Expresion CondicionAnd():
{
Expresion a,b;
	Token t;
}
{
	a=ExpresionIgualdad()(t=<AND>b=ExpresionIgualdad(){a=new Logicas(a,b,Operacion.Operador.AND,t.beginLine,t.beginColumn);}
		)*
	
	{return a;}
}
Expresion ExpresionIgualdad():
{
Expresion a,b;
	Token t;
}
{
	a=ExpresionRelacional()(t=<IGUAL_IGUAL> b=ExpresionRelacional(){a=new Relacional(a,b,Operacion.Operador.IGUAL_IGUAL,t.beginLine,t.beginColumn);}
	|t=<DISTINTO> b=ExpresionRelacional() {a=new Relacional(a,b,Operacion.Operador.DISTINTO,t.beginLine,t.beginColumn);}
	)*
	{return a;}
}
Expresion ExpresionRelacional():
{
	Expresion a,b;
	Token t;
}
{
	a=ExpresionAditiva()
	(
		t=<MAYOR> b=ExpresionAditiva(){a=new Relacional(a,b,Operacion.Operador.MAYOR,t.beginLine,t.beginColumn);}
		|t=<MENOR> b=ExpresionAditiva(){a=new Relacional(a,b,Operacion.Operador.MENOR,t.beginLine,t.beginColumn);}
		|t=<MAYOR_I>b=ExpresionAditiva(){a=new Relacional(a,b,Operacion.Operador.MAYOR_IGUAL,t.beginLine,t.beginColumn);}
		|t=<MENOR_I>b=ExpresionAditiva(){a=new Relacional(a,b,Operacion.Operador.MENOR_IGUAL,t.beginLine,t.beginColumn);}
	)*
	{return a;}
}
Expresion ExpresionAditiva():
{
	Expresion a,b;
	Token t;
}
{
	a=ExpresionMultiplicativas()
	(
		t=<MAS>b=ExpresionMultiplicativas(){a=new Aritmeticas(a,b,Operacion.Operador.SUMA,t.beginLine,t.beginColumn);}
		|t=<MENOS>b=ExpresionMultiplicativas(){a=new Aritmeticas(a,b,Operacion.Operador.RESTA,t.beginLine,t.beginColumn);}
	)*
	{return a;}
}
Expresion ExpresionMultiplicativas():
{
Expresion a,b;
 Token t;
}
{
	a=ExpresionUnaria()
	(
		t=<POR> b=ExpresionUnaria(){a=new Aritmeticas(a,b,Operacion.Operador.MULTIPLICACION,t.beginLine,t.beginColumn);}
		|t=<DIV>b=ExpresionUnaria(){a=new Aritmeticas(a,b,Operacion.Operador.DIVISION,t.beginLine,t.beginColumn);}
		|t=<POTENCIA>b=ExpresionUnaria(){a=new Aritmeticas(a,b,Operacion.Operador.POTENCIA,t.beginLine,t.beginColumn);}
		|t=<MODULO>b=ExpresionUnaria(){a=new Aritmeticas(a,b,Operacion.Operador.MODULO,t.beginLine,t.beginColumn);}
	)*
	{return a;}
}
Expresion ExpresionUnaria():
{
	Expresion exp,a;
	Token t;
}
{
	t=<MENOS>exp=ExpresionUnaria(){return new Unarias(exp,null,Operacion.Operador.RESTA,t.beginLine,t.beginColumn);}
	|t=<NOT>exp=ExpresionUnaria(){return new Unarias(exp,null,Operacion.Operador.NOT,t.beginLine,t.beginColumn);}
	|exp=Primitivo(){return exp;}
}
Expresion Primitivo():
{
	Expresion aux;
	Token i;
	LinkedList<Expresion>dim=new LinkedList(),lex=new LinkedList();
}
{
	<NUMERIC>{return new Literal(Double.parseDouble(token.image),new TipoExp(Tipos.NUMERIC),token.beginLine,token.beginColumn);}
	|<BOOLEANO>{return new Literal(Boolean.parseBoolean(token.image),new TipoExp(Tipos.BOOLEAN),token.beginLine,token.beginColumn);}
	|<INTEGER>{return new Literal(Integer.parseInt(token.image),new TipoExp(Tipos.INTEGER),token.beginLine,token.beginColumn);}
	|<STRING>{return new Literal(retirar(token.image.substring(1,token.image.length()-1)),new TipoExp(Tipos.STRING),token.beginLine,token.beginColumn);}
	|LOOKAHEAD(3)i=<IDENTIFICADOR> <PAR_A> <PAR_C> (dim=LCORCHETES())?{return new Llamadas(new Identificador(i.image,i.beginLine,i.beginColumn),lex,dim);}
	|LOOKAHEAD(3)i=<IDENTIFICADOR> <PAR_A> lex=LISTAEXP() <PAR_C> (dim=LCORCHETES())?{return new Llamadas(new Identificador(i.image,i.beginLine,i.beginColumn),lex,dim);}
	|LOOKAHEAD(2)i=<IDENTIFICADOR> dim=LCORCHETES(){return new Acceso(new Identificador(i.image,i.beginLine,i.beginColumn),dim,i.beginLine,i.beginColumn);}
	|i=<IDENTIFICADOR>{return new Identificador(i.image,i.beginLine,i.beginColumn);}
	|<PAR_A> aux=EXP() <PAR_C>{return aux;}
	|<NULO>{return new  Nulo(token.beginLine,token.beginColumn); }
}


