
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package AnalizadorA;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Reportes.Errores;
import Reportes.Errores.TipoError;
import java.util.ArrayList;
import Expresion.*;
import Expresion.TipoExp.Tipos;
import AST.*;
import Instruccion.Instruccion;
import Instruccion.Print;
import Instruccion.AsignacionPosicion;
import Instruccion.DecFuncion;
import Objetos.Nulo;
import Operaciones.Aritmeticas;
import Operaciones.Operacion;
import Operaciones.Logicas;
import Operaciones.Relacional;
import Instruccion.DecAsig;
import Expresion.Identificador;
import Operaciones.Ternarias;
import Operaciones.Unarias;
import Control.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\004\000\002\004\005\000\002\004" +
    "\004\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\005\003\000\002\005\004\000\002\005\003\000\002" +
    "\005\004\000\002\005\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\005\000\002\005\003\000\002\005\004" +
    "\000\002\007\005\000\002\007\006\000\002\007\005\000" +
    "\002\007\006\000\002\003\004\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\007\000\002\003\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\006\005\000\002" +
    "\006\004\000\002\023\005\000\002\023\006\000\002\023" +
    "\006\000\002\023\007\000\002\010\003\000\002\010\003" +
    "\000\002\011\007\000\002\011\010\000\002\015\011\000" +
    "\002\015\010\000\002\015\004\000\002\012\011\000\002" +
    "\012\010\000\002\016\007\000\002\016\006\000\002\016" +
    "\006\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\013\004\000\002\013\003\000\002\013\004\000" +
    "\002\013\003\000\002\017\004\000\002\020\005\000\002" +
    "\020\006\000\002\020\007\000\002\020\010\000\002\014" +
    "\011\000\002\014\010\000\002\022\005\000\002\022\003" +
    "\000\002\022\005\000\002\022\007\000\002\021\005\000" +
    "\002\021\003\000\002\021\003\000\002\021\005\000\002" +
    "\024\006\000\002\024\007\000\002\024\003\000\002\024" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\020\004\010\034\017\047\016\051\014\052" +
    "\023\053\005\056\011\001\002\000\024\002\ufff5\004\ufff5" +
    "\034\ufff5\041\260\047\ufff5\051\ufff5\052\ufff5\053\ufff5\056" +
    "\ufff5\001\002\000\032\002\uffaa\004\uffaa\005\uffaa\034\uffaa" +
    "\041\257\047\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\001\002\000\004\040\254\001\002\000\022" +
    "\002\000\004\010\034\017\047\016\051\014\052\023\053" +
    "\005\056\011\001\002\000\022\004\010\005\241\034\211" +
    "\047\016\051\014\052\023\053\005\056\011\001\002\000" +
    "\034\002\uff98\004\uff98\005\uff98\010\234\034\uff98\041\235" +
    "\047\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056" +
    "\uff98\001\002\000\022\002\ufff9\004\ufff9\034\ufff9\047\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\056\ufff9\001\002\000\030\002" +
    "\uffbb\004\uffbb\005\uffbb\034\uffbb\047\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\056\uffbb\001\002\000\004\010" +
    "\174\001\002\000\022\002\ufffb\004\ufffb\034\ufffb\047\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\056\ufffb\001\002\000\004\010" +
    "\157\001\002\000\010\006\033\010\031\040\032\001\002" +
    "\000\022\002\ufff0\004\ufff0\034\ufff0\047\ufff0\051\ufff0\052" +
    "\ufff0\053\ufff0\056\ufff0\001\002\000\022\002\ufff7\004\ufff7" +
    "\034\ufff7\047\ufff7\051\ufff7\052\ufff7\053\ufff7\056\ufff7\001" +
    "\002\000\022\002\uffff\004\uffff\034\uffff\047\uffff\051\uffff" +
    "\052\uffff\053\uffff\056\uffff\001\002\000\032\002\uffac\004" +
    "\uffac\005\uffac\034\uffac\041\030\047\uffac\051\uffac\052\uffac" +
    "\053\uffac\054\uffac\055\uffac\056\uffac\001\002\000\030\002" +
    "\uffbc\004\uffbc\005\uffbc\034\uffbc\047\uffbc\051\uffbc\052\uffbc" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\001\002\000\022\002" +
    "\ufffd\004\ufffd\034\ufffd\047\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\056\ufffd\001\002\000\004\002\027\001\002\000\004\002" +
    "\001\001\002\000\030\002\uffad\004\uffad\005\uffad\034\uffad" +
    "\047\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\001\002\000\032\010\035\011\150\013\051\024\037" +
    "\034\050\035\040\036\044\043\036\044\042\045\043\046" +
    "\047\055\146\001\002\000\030\010\035\013\051\024\037" +
    "\034\050\035\040\036\044\042\125\043\036\044\042\045" +
    "\043\046\047\001\002\000\030\006\045\010\035\013\051" +
    "\024\037\034\050\035\040\036\044\043\036\044\042\045" +
    "\043\046\047\001\002\000\102\002\uffa9\004\uffa9\005\uffa9" +
    "\007\uffa9\011\uffa9\012\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\040\uffa9\041\uffa9\047\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\001\002\000\026\010\035\013" +
    "\051\024\037\034\050\035\040\036\044\043\036\044\042" +
    "\045\043\046\047\001\002\000\100\002\uffc8\004\uffc8\005" +
    "\uffc8\007\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\041\uffc8\047\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\001\002\000\026\010\035\013\051" +
    "\024\037\034\050\035\040\036\044\043\036\044\042\045" +
    "\043\046\047\001\002\000\100\002\uffca\004\uffca\005\uffca" +
    "\007\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034" +
    "\uffca\041\uffca\047\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\001\002\000\100\002\uffc3\004\uffc3\005" +
    "\uffc3\007\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3" +
    "\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\041\uffc3\047\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\001\002\000\100\002\uffc5\004\uffc5" +
    "\005\uffc5\007\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\041\uffc5\047\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\001\002\000\100\002\uffc7\004" +
    "\uffc7\005\uffc7\007\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\041\uffc7\047\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\001\002\000\100\002\uffc9" +
    "\004\uffc9\005\uffc9\007\uffc9\011\uffc9\012\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032" +
    "\uffc9\033\uffc9\034\uffc9\041\uffc9\047\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\056\uffc9\001\002\000\026\010" +
    "\035\013\051\024\037\034\050\035\040\036\044\043\036" +
    "\044\042\045\043\046\047\001\002\000\100\002\uffc4\004" +
    "\uffc4\005\uffc4\007\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\041\uffc4\047\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\001\002\000\100\002\uffc6" +
    "\004\uffc6\005\uffc6\007\uffc6\011\uffc6\012\uffc6\014\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032" +
    "\uffc6\033\uffc6\034\uffc6\041\uffc6\047\uffc6\051\uffc6\052\uffc6" +
    "\053\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000\104\002" +
    "\uffcb\004\uffcb\005\uffcb\006\033\007\uffcb\010\031\011\uffcb" +
    "\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\041\uffcb\047" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb" +
    "\001\002\000\026\010\035\013\051\024\037\034\050\035" +
    "\040\036\044\043\036\044\042\045\043\046\047\001\002" +
    "\000\042\007\062\012\072\014\054\015\064\016\071\017" +
    "\057\020\053\021\070\022\060\023\063\024\055\025\065" +
    "\026\061\027\066\030\056\031\067\001\002\000\026\010" +
    "\035\013\051\024\037\034\050\035\040\036\044\043\036" +
    "\044\042\045\043\046\047\001\002\000\026\010\035\013" +
    "\051\024\037\034\050\035\040\036\044\043\036\044\042" +
    "\045\043\046\047\001\002\000\026\010\035\013\051\024" +
    "\037\034\050\035\040\036\044\043\036\044\042\045\043" +
    "\046\047\001\002\000\026\010\035\013\051\024\037\034" +
    "\050\035\040\036\044\043\036\044\042\045\043\046\047" +
    "\001\002\000\026\010\035\013\051\024\037\034\050\035" +
    "\040\036\044\043\036\044\042\045\043\046\047\001\002" +
    "\000\026\010\035\013\051\024\037\034\050\035\040\036" +
    "\044\043\036\044\042\045\043\046\047\001\002\000\026" +
    "\010\035\013\051\024\037\034\050\035\040\036\044\043" +
    "\036\044\042\045\043\046\047\001\002\000\104\002\uffa8" +
    "\004\uffa8\005\uffa8\006\033\007\uffa8\011\uffa8\012\uffa8\014" +
    "\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8" +
    "\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\033\uffa8\034\uffa8\040\uffa8\041\uffa8\047\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\001" +
    "\002\000\026\010\035\013\051\024\037\034\050\035\040" +
    "\036\044\043\036\044\042\045\043\046\047\001\002\000" +
    "\026\010\035\013\051\024\037\034\050\035\040\036\044" +
    "\043\036\044\042\045\043\046\047\001\002\000\026\010" +
    "\035\013\051\024\037\034\050\035\040\036\044\043\036" +
    "\044\042\045\043\046\047\001\002\000\026\010\035\013" +
    "\051\024\037\034\050\035\040\036\044\043\036\044\042" +
    "\045\043\046\047\001\002\000\026\010\035\013\051\024" +
    "\037\034\050\035\040\036\044\043\036\044\042\045\043" +
    "\046\047\001\002\000\026\010\035\013\051\024\037\034" +
    "\050\035\040\036\044\043\036\044\042\045\043\046\047" +
    "\001\002\000\026\010\035\013\051\024\037\034\050\035" +
    "\040\036\044\043\036\044\042\045\043\046\047\001\002" +
    "\000\026\010\035\013\051\024\037\034\050\035\040\036" +
    "\044\043\036\044\042\045\043\046\047\001\002\000\100" +
    "\002\uffd5\004\uffd5\005\uffd5\007\uffd5\011\uffd5\012\uffd5\014" +
    "\054\015\064\016\071\017\057\020\053\021\070\022\060" +
    "\023\063\024\055\025\065\026\061\027\066\030\056\031" +
    "\uffd5\032\uffd5\033\uffd5\034\uffd5\041\uffd5\047\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\001\002\000" +
    "\070\002\uffd0\004\uffd0\005\uffd0\007\uffd0\011\uffd0\012\uffd0" +
    "\014\uffd0\021\uffd0\022\uffd0\023\063\024\055\025\065\026" +
    "\061\027\066\030\056\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\041\uffd0\047\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055" +
    "\uffd0\056\uffd0\001\002\000\100\002\uffce\004\uffce\005\uffce" +
    "\007\uffce\011\uffce\012\uffce\014\uffce\015\064\016\071\017" +
    "\057\020\053\021\uffce\022\uffce\023\063\024\055\025\065" +
    "\026\061\027\066\030\056\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\041\uffce\047\uffce\051\uffce\052\uffce\053\uffce\054\uffce" +
    "\055\uffce\056\uffce\001\002\000\042\012\072\014\054\015" +
    "\064\016\071\017\057\020\053\021\070\022\060\023\063" +
    "\024\055\025\065\026\061\027\066\030\056\031\067\032" +
    "\077\001\002\000\026\010\035\013\051\024\037\034\050" +
    "\035\040\036\044\043\036\044\042\045\043\046\047\001" +
    "\002\000\100\002\uffcd\004\uffcd\005\uffcd\007\uffcd\011\uffcd" +
    "\012\072\014\054\015\064\016\071\017\057\020\053\021" +
    "\070\022\060\023\063\024\055\025\065\026\061\027\066" +
    "\030\056\031\067\032\uffcd\033\uffcd\034\uffcd\041\uffcd\047" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\001\002\000\100\002\uffd7\004\uffd7\005\uffd7\007\uffd7\011" +
    "\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\041\uffd7" +
    "\047\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\001\002\000\100\002\uffd9\004\uffd9\005\uffd9\007\uffd9" +
    "\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020" +
    "\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\041" +
    "\uffd9\047\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\001\002\000\070\002\uffd2\004\uffd2\005\uffd2\007" +
    "\uffd2\011\uffd2\012\uffd2\014\uffd2\021\uffd2\022\uffd2\023\063" +
    "\024\055\025\065\026\061\027\066\030\056\031\uffd2\032" +
    "\uffd2\033\uffd2\034\uffd2\041\uffd2\047\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\056\uffd2\001\002\000\100\002" +
    "\uffdc\004\uffdc\005\uffdc\007\uffdc\011\uffdc\012\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\065\026\061\027\066\030\056\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\041\uffdc\047\uffdc\051\uffdc\052" +
    "\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\001\002\000\102" +
    "\002\uffa7\004\uffa7\005\uffa7\007\uffa7\011\uffa7\012\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\040\uffa7\041\uffa7\047\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\001" +
    "\002\000\100\002\uffda\004\uffda\005\uffda\007\uffda\011\uffda" +
    "\012\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\041\uffda\047" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\001\002\000\100\002\uffcf\004\uffcf\005\uffcf\007\uffcf\011" +
    "\uffcf\012\uffcf\014\uffcf\015\064\016\071\017\057\020\053" +
    "\021\uffcf\022\uffcf\023\063\024\055\025\065\026\061\027" +
    "\066\030\056\031\uffcf\032\uffcf\033\uffcf\034\uffcf\041\uffcf" +
    "\047\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056" +
    "\uffcf\001\002\000\070\002\uffd3\004\uffd3\005\uffd3\007\uffd3" +
    "\011\uffd3\012\uffd3\014\uffd3\021\uffd3\022\uffd3\023\063\024" +
    "\055\025\065\026\061\027\066\030\056\031\uffd3\032\uffd3" +
    "\033\uffd3\034\uffd3\041\uffd3\047\uffd3\051\uffd3\052\uffd3\053" +
    "\uffd3\054\uffd3\055\uffd3\056\uffd3\001\002\000\100\002\uffd8" +
    "\004\uffd8\005\uffd8\007\uffd8\011\uffd8\012\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\033\uffd8\034\uffd8\041\uffd8\047\uffd8\051\uffd8\052\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\001\002\000\100\002" +
    "\uffdb\004\uffdb\005\uffdb\007\uffdb\011\uffdb\012\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023" +
    "\uffdb\024\uffdb\025\065\026\061\027\066\030\056\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\041\uffdb\047\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\001\002\000\100" +
    "\002\uffd4\004\uffd4\005\uffd4\007\uffd4\011\uffd4\012\uffd4\014" +
    "\uffd4\015\064\016\071\017\057\020\053\021\070\022\060" +
    "\023\063\024\055\025\065\026\061\027\066\030\056\031" +
    "\uffd4\032\uffd4\033\uffd4\034\uffd4\041\uffd4\047\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\001\002\000" +
    "\070\002\uffd1\004\uffd1\005\uffd1\007\uffd1\011\uffd1\012\uffd1" +
    "\014\uffd1\021\uffd1\022\uffd1\023\063\024\055\025\065\026" +
    "\061\027\066\030\056\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\041\uffd1\047\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\001\002\000\100\002\uffd6\004\uffd6\005\uffd6" +
    "\007\uffd6\011\uffd6\012\uffd6\014\uffd6\015\uffd6\016\uffd6\017" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\041\uffd6\047\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6" +
    "\055\uffd6\056\uffd6\001\002\000\042\007\117\012\072\014" +
    "\054\015\064\016\071\017\057\020\053\021\070\022\060" +
    "\023\063\024\055\025\065\026\061\027\066\030\056\031" +
    "\067\001\002\000\004\007\120\001\002\000\104\002\uffa6" +
    "\004\uffa6\005\uffa6\006\033\007\uffa6\011\uffa6\012\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\022\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031" +
    "\uffa6\032\uffa6\033\uffa6\034\uffa6\040\uffa6\041\uffa6\047\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\001" +
    "\002\000\102\002\uffa5\004\uffa5\005\uffa5\007\uffa5\011\uffa5" +
    "\012\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\040\uffa5\041" +
    "\uffa5\047\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\001\002\000\100\002\uffdd\004\uffdd\005\uffdd\007" +
    "\uffdd\011\uffdd\012\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\041\uffdd\047\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\001\002\000\042\011\124\012\072\014\054" +
    "\015\064\016\071\017\057\020\053\021\070\022\060\023" +
    "\063\024\055\025\065\026\061\027\066\030\056\031\067" +
    "\001\002\000\100\002\uffcc\004\uffcc\005\uffcc\007\uffcc\011" +
    "\uffcc\012\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\041\uffcc" +
    "\047\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\001\002\000\004\010\130\001\002\000\070\002\uffe1" +
    "\004\uffe1\005\uffe1\012\072\014\054\015\064\016\071\017" +
    "\057\020\053\021\070\022\060\023\063\024\055\025\065" +
    "\026\061\027\066\030\056\031\067\034\uffe1\041\127\047" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\001\002\000\030\002\uffe0\004\uffe0\005\uffe0\034\uffe0\047" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0" +
    "\001\002\000\006\011\132\034\131\001\002\000\010\011" +
    "\uffa1\033\uffa1\040\143\001\002\000\004\004\010\001\002" +
    "\000\006\011\135\033\134\001\002\000\004\034\137\001" +
    "\002\000\004\004\010\001\002\000\022\002\uffa4\004\uffa4" +
    "\034\uffa4\047\uffa4\051\uffa4\052\uffa4\053\uffa4\056\uffa4\001" +
    "\002\000\010\011\uffa2\033\uffa2\040\140\001\002\000\026" +
    "\010\035\013\051\024\037\034\050\035\040\036\044\043" +
    "\036\044\042\045\043\046\047\001\002\000\044\011\uff9f" +
    "\012\072\014\054\015\064\016\071\017\057\020\053\021" +
    "\070\022\060\023\063\024\055\025\065\026\061\027\066" +
    "\030\056\031\067\033\uff9f\001\002\000\022\002\uffa3\004" +
    "\uffa3\034\uffa3\047\uffa3\051\uffa3\052\uffa3\053\uffa3\056\uffa3" +
    "\001\002\000\026\010\035\013\051\024\037\034\050\035" +
    "\040\036\044\043\036\044\042\045\043\046\047\001\002" +
    "\000\044\011\uffa0\012\072\014\054\015\064\016\071\017" +
    "\057\020\053\021\070\022\060\023\063\024\055\025\065" +
    "\026\061\027\066\030\056\031\067\033\uffa0\001\002\000" +
    "\006\011\153\033\152\001\002\000\006\011\uff9c\033\uff9c" +
    "\001\002\000\044\011\uff9d\012\072\014\054\015\064\016" +
    "\071\017\057\020\053\021\070\022\060\023\063\024\055" +
    "\025\065\026\061\027\066\030\056\031\067\033\uff9d\001" +
    "\002\000\102\002\uffc0\004\uffc0\005\uffc0\006\033\007\uffc0" +
    "\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\020" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\041" +
    "\uffc0\047\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0" +
    "\056\uffc0\001\002\000\100\002\uffbe\004\uffbe\005\uffbe\007" +
    "\uffbe\011\uffbe\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\041\uffbe\047\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\001\002\000\030\010\035\013\051\024\037" +
    "\034\050\035\040\036\044\043\036\044\042\045\043\046" +
    "\047\055\155\001\002\000\102\002\uffbf\004\uffbf\005\uffbf" +
    "\006\033\007\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\041\uffbf\047\uffbf\051\uffbf\052\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\001\002\000\100\002\uffbd\004" +
    "\uffbd\005\uffbd\007\uffbd\011\uffbd\012\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\041\uffbd\047\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\056\uffbd\001\002\000\006\011\uff9b" +
    "\033\uff9b\001\002\000\044\011\uff9e\012\072\014\054\015" +
    "\064\016\071\017\057\020\053\021\070\022\060\023\063" +
    "\024\055\025\065\026\061\027\066\030\056\031\067\033" +
    "\uff9e\001\002\000\026\010\035\013\051\024\037\034\050" +
    "\035\040\036\044\043\036\044\042\045\043\046\047\001" +
    "\002\000\042\011\161\012\072\014\054\015\064\016\071" +
    "\017\057\020\053\021\070\022\060\023\063\024\055\025" +
    "\065\026\061\027\066\030\056\031\067\001\002\000\004" +
    "\004\010\001\002\000\032\002\uffba\004\uffba\005\uffba\034" +
    "\uffba\047\uffba\050\163\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\001\002\000\006\004\010\047\166\001" +
    "\002\000\030\002\uffb9\004\uffb9\005\uffb9\034\uffb9\047\uffb9" +
    "\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\001" +
    "\002\000\030\002\uffb6\004\uffb6\005\uffb6\034\uffb6\047\uffb6" +
    "\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\001" +
    "\002\000\004\010\167\001\002\000\026\010\035\013\051" +
    "\024\037\034\050\035\040\036\044\043\036\044\042\045" +
    "\043\046\047\001\002\000\042\011\171\012\072\014\054" +
    "\015\064\016\071\017\057\020\053\021\070\022\060\023" +
    "\063\024\055\025\065\026\061\027\066\030\056\031\067" +
    "\001\002\000\004\004\010\001\002\000\032\002\uffb7\004" +
    "\uffb7\005\uffb7\034\uffb7\047\uffb7\050\163\051\uffb7\052\uffb7" +
    "\053\uffb7\054\uffb7\055\uffb7\056\uffb7\001\002\000\030\002" +
    "\uffb8\004\uffb8\005\uffb8\034\uffb8\047\uffb8\051\uffb8\052\uffb8" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\001\002\000\026\010" +
    "\035\013\051\024\037\034\050\035\040\036\044\043\036" +
    "\044\042\045\043\046\047\001\002\000\042\011\176\012" +
    "\072\014\054\015\064\016\071\017\057\020\053\021\070" +
    "\022\060\023\063\024\055\025\065\026\061\027\066\030" +
    "\056\031\067\001\002\000\004\004\177\001\002\000\010" +
    "\005\202\054\203\055\200\001\002\000\004\032\232\001" +
    "\002\000\004\005\231\001\002\000\030\002\uffb4\004\uffb4" +
    "\005\uffb4\034\uffb4\047\uffb4\051\uffb4\052\uffb4\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\001\002\000\026\010\035\013\051" +
    "\024\037\034\050\035\040\036\044\043\036\044\042\045" +
    "\043\046\047\001\002\000\042\012\072\014\054\015\064" +
    "\016\071\017\057\020\053\021\070\022\060\023\063\024" +
    "\055\025\065\026\061\027\066\030\056\031\067\032\205" +
    "\001\002\000\026\004\010\005\uffb0\034\211\047\016\051" +
    "\014\052\023\053\005\054\203\055\200\056\011\001\002" +
    "\000\030\004\uffe7\005\uffe7\034\uffe7\041\230\047\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\001\002" +
    "\000\026\004\uffe9\005\uffe9\034\uffe9\047\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\001\002\000\026" +
    "\004\uffeb\005\uffeb\034\uffeb\047\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\001\002\000\010\006\033" +
    "\010\031\040\227\001\002\000\026\004\uffe3\005\uffe3\034" +
    "\uffe3\047\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3" +
    "\056\uffe3\001\002\000\026\004\uffef\005\uffef\034\uffef\047" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef" +
    "\001\002\000\004\005\uffb2\001\002\000\026\004\010\005" +
    "\uffb1\034\211\047\016\051\014\052\023\053\005\054\203" +
    "\055\200\056\011\001\002\000\026\004\uffed\005\uffed\034" +
    "\uffed\047\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\001\002\000\030\004\uffe5\005\uffe5\034\uffe5\041" +
    "\226\047\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\001\002\000\026\004\uffe8\005\uffe8\034\uffe8\047" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\001\002\000\026\004\uffea\005\uffea\034\uffea\047\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\001\002" +
    "\000\026\004\uffe2\005\uffe2\034\uffe2\047\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\001\002\000\026" +
    "\004\uffee\005\uffee\034\uffee\047\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\001\002\000\004\005\uffb3" +
    "\001\002\000\026\004\uffec\005\uffec\034\uffec\047\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\001\002" +
    "\000\026\004\uffe4\005\uffe4\034\uffe4\047\uffe4\051\uffe4\052" +
    "\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\001\002\000\026" +
    "\010\035\013\051\024\037\034\050\035\040\036\044\043" +
    "\036\044\042\045\043\046\047\001\002\000\026\004\uffe6" +
    "\005\uffe6\034\uffe6\047\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\001\002\000\030\002\uffb5\004\uffb5" +
    "\005\uffb5\034\uffb5\047\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\001\002\000\022\004\010\005\uffae" +
    "\034\211\047\016\051\014\052\023\053\005\056\011\001" +
    "\002\000\022\004\010\005\uffaf\034\211\047\016\051\014" +
    "\052\023\053\005\056\011\001\002\000\026\010\035\013" +
    "\051\024\037\034\050\035\040\036\044\043\036\044\042" +
    "\045\043\046\047\001\002\000\030\002\uff97\004\uff97\005" +
    "\uff97\034\uff97\047\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\001\002\000\042\011\237\012\072\014" +
    "\054\015\064\016\071\017\057\020\053\021\070\022\060" +
    "\023\063\024\055\025\065\026\061\027\066\030\056\031" +
    "\067\001\002\000\032\002\uff9a\004\uff9a\005\uff9a\034\uff9a" +
    "\041\240\047\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\001\002\000\030\002\uff99\004\uff99\005\uff99" +
    "\034\uff99\047\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055" +
    "\uff99\056\uff99\001\002\000\032\002\uffc1\004\uffc1\005\uffc1" +
    "\034\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\001\002\000\022\004\010\005\243" +
    "\034\211\047\016\051\014\052\023\053\005\056\011\001" +
    "\002\000\032\002\uffc2\004\uffc2\005\uffc2\034\uffc2\047\uffc2" +
    "\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056" +
    "\uffc2\001\002\000\022\002\ufff1\004\ufff1\034\ufff1\047\ufff1" +
    "\051\ufff1\052\ufff1\053\ufff1\056\ufff1\001\002\000\022\002" +
    "\ufffc\004\ufffc\034\ufffc\047\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\056\ufffc\001\002\000\024\002\ufff2\004\ufff2\034\ufff2\041" +
    "\253\047\ufff2\051\ufff2\052\ufff2\053\ufff2\056\ufff2\001\002" +
    "\000\022\002\ufff6\004\ufff6\034\ufff6\047\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\056\ufff6\001\002\000\022\002\ufffe\004\ufffe" +
    "\034\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe\056\ufffe\001" +
    "\002\000\022\002\ufff8\004\ufff8\034\ufff8\047\ufff8\051\ufff8" +
    "\052\ufff8\053\ufff8\056\ufff8\001\002\000\022\002\ufffa\004" +
    "\ufffa\034\ufffa\047\ufffa\051\ufffa\052\ufffa\053\ufffa\056\ufffa" +
    "\001\002\000\022\002\ufff3\004\ufff3\034\ufff3\047\ufff3\051" +
    "\ufff3\052\ufff3\053\ufff3\056\ufff3\001\002\000\026\010\035" +
    "\013\051\024\037\034\050\035\040\036\044\043\036\044" +
    "\042\045\043\046\047\001\002\000\070\002\uffdf\004\uffdf" +
    "\005\uffdf\012\072\014\054\015\064\016\071\017\057\020" +
    "\053\021\070\022\060\023\063\024\055\025\065\026\061" +
    "\027\066\030\056\031\067\034\uffdf\041\256\047\uffdf\051" +
    "\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\001\002" +
    "\000\030\002\uffde\004\uffde\005\uffde\034\uffde\047\uffde\051" +
    "\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\001\002" +
    "\000\030\002\uffab\004\uffab\005\uffab\034\uffab\047\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\001\002" +
    "\000\022\002\ufff4\004\ufff4\034\ufff4\047\ufff4\051\ufff4\052" +
    "\ufff4\053\ufff4\056\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\032\002\025\004\006\006\014\007\021\010" +
    "\024\011\023\012\012\013\011\014\020\017\005\023\003" +
    "\024\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\251\007\247\010\244\011\023" +
    "\012\012\013\250\014\246\017\005\023\245\024\243\001" +
    "\001\000\026\005\241\006\207\007\212\010\215\011\023" +
    "\012\012\013\206\017\005\023\205\024\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\146\017\045\021\144\023\040\001\001\000" +
    "\010\003\125\017\045\023\040\001\001\000\010\003\051" +
    "\017\045\023\040\001\001\000\002\001\001\000\010\003" +
    "\122\017\045\023\040\001\001\000\002\001\001\000\010" +
    "\003\121\017\045\023\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\003\115\017\045\023\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\033\001\001" +
    "\000\010\003\114\017\045\023\040\001\001\000\002\001" +
    "\001\000\010\003\113\017\045\023\040\001\001\000\010" +
    "\003\112\017\045\023\040\001\001\000\010\003\111\017" +
    "\045\023\040\001\001\000\010\003\110\017\045\023\040" +
    "\001\001\000\010\003\107\017\045\023\040\001\001\000" +
    "\010\003\106\017\045\023\040\001\001\000\010\003\105" +
    "\017\045\023\040\001\001\000\004\020\104\001\001\000" +
    "\010\003\103\017\045\023\040\001\001\000\010\003\102" +
    "\017\045\023\040\001\001\000\010\003\101\017\045\023" +
    "\040\001\001\000\010\003\100\017\045\023\040\001\001" +
    "\000\010\003\075\017\045\023\040\001\001\000\010\003" +
    "\074\017\045\023\040\001\001\000\010\003\073\017\045" +
    "\023\040\001\001\000\010\003\072\017\045\023\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\077\017\045\023\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\132\001" +
    "\001\000\002\001\001\000\004\006\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\140\017\045" +
    "\023\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\143\017\045\023\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\150\001\001\000\002\001\001\000\010\003\155" +
    "\017\045\023\040\001\001\000\004\020\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\157\017\045\023\040\001\001\000\002\001\001\000" +
    "\004\006\161\001\001\000\004\015\163\001\001\000\004" +
    "\006\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\167\017\045\023\040\001\001" +
    "\000\002\001\001\000\004\006\171\001\001\000\004\015" +
    "\172\001\001\000\002\001\001\000\010\003\174\017\045" +
    "\023\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\203\017\045\023\040\001" +
    "\001\000\002\001\001\000\030\005\214\006\207\007\212" +
    "\010\215\011\023\012\012\013\206\016\213\017\005\023" +
    "\205\024\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\220" +
    "\007\222\010\224\011\023\012\012\013\217\016\223\017" +
    "\005\023\216\024\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\125\017\045\023\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\232" +
    "\006\207\007\212\010\215\011\023\012\012\013\206\017" +
    "\005\023\205\024\211\001\001\000\024\006\220\007\222" +
    "\010\224\011\023\012\012\013\217\017\005\023\216\024" +
    "\221\001\001\000\010\003\235\017\045\023\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\220\007\222" +
    "\010\224\011\023\012\012\013\217\017\005\023\216\024" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\254\017\045\023\040\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public AST ast;
   
    public ArrayList<Errores>listaerrores=new ArrayList<>();
    public void syntax_error(Symbol s){
        Errores nuevo=new Errores(TipoError.SINTACTICO,"Error R de sintaxis "+s.value,s.left+1,s.right+1);
        listaerrores.add(nuevo);
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
       
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Errores nuevo=new Errores(TipoError.SINTACTICO,"Error NR de sintaxis "+s.value,s.left+1,s.right+1);
        //Errores nuevo=new Errores(s.left+1,s.right+1,"Error NR de sintaxis "+s.value,Errores.Terror.SINTACTICO);
        listaerrores.add(nuevo);
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST start_val = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		AST arbol=new AST(a);ast=arbol;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= ASIGNACION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(a);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CUERPO ::= CUERPO ASIGNACION 
            {
              LinkedList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.add(a);RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CUERPO ::= CONTROLES 
            {
              LinkedList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(c);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CUERPO ::= CUERPO CONTROLES 
            {
              LinkedList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.add(b);RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO ::= BLOQUE 
            {
              LinkedList<Nodo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(new Bloque(b));RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO ::= CUERPO BLOQUE 
            {
              LinkedList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.add(new Bloque(b));RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO ::= TRANSFERENCIAS 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(a);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO ::= CUERPO TRANSFERENCIAS 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(a);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO ::= DECFUNCION 
            {
              LinkedList<Nodo> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(d);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO ::= CUERPO DECFUNCION 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(d);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO ::= LLAMADAS 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(l);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO ::= LLAMADAS PYCOMA 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(l);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO ::= CUERPO LLAMADAS PYCOMA 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(a);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO ::= CUERPO LLAMADAS 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(a);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO ::= CUERPO RETORNOS 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(r);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO ::= RETORNOS 
            {
              LinkedList<Nodo> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(r);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPOINTERNO ::= ASIGNACION 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(a);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPOINTERNO ::= CUERPOINTERNO ASIGNACION 
            {
              LinkedList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.add(a);RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPOINTERNO ::= CONTROLES 
            {
              LinkedList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(c);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPOINTERNO ::= CUERPOINTERNO CONTROLES 
            {
              LinkedList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.add(b);RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPOINTERNO ::= BLOQUE 
            {
              LinkedList<Nodo> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(new Bloque(b));RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPOINTERNO ::= CUERPOINTERNO BLOQUE 
            {
              LinkedList<Nodo> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		c.add(new Bloque(b));RESULT=c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPOINTERNO ::= TRANSFERENCIAS 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(a);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPOINTERNO ::= CUERPOINTERNO TRANSFERENCIAS 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(a);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPOINTERNO ::= LLAMADAS 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(l);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPOINTERNO ::= LLAMADAS PYCOMA 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion l = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(l);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPOINTERNO ::= CUERPOINTERNO LLAMADAS 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(a);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPOINTERNO ::= CUERPOINTERNO LLAMADAS PYCOMA 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		l.add(a);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CUERPOINTERNO ::= RETORNOS 
            {
              LinkedList<Nodo> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Nodo>lista=new LinkedList<>();lista.add(r);RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUERPOINTERNO ::= CUERPOINTERNO RETORNOS 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo r = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(r);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERPOINTERNO",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= ID IGUAL EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DecAsig(e,new Identificador(a,aleft+1,aright+1),aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= ID IGUAL EXP PYCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new DecAsig(e,new Identificador(a,aleft+1,aright+1),aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= ACCESOARREGLO IGUAL EXP 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new AsignacionPosicion(a,e,ileft+1,iright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= ACCESOARREGLO IGUAL EXP PYCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new AsignacionPosicion(a,e,ileft+1,iright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXP ::= MENOS EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Unarias(b,null,Operacion.Operador.RESTA,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXP ::= EXP MAS EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Aritmeticas(a,b,Operacion.Operador.SUMA,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXP ::= EXP MENOS EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Aritmeticas(a,b,Operacion.Operador.RESTA,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXP ::= EXP POR EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Aritmeticas(a,b,Operacion.Operador.MULTIPLICACION,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= EXP DIV EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Aritmeticas(a,b,Operacion.Operador.DIVISION,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= EXP POTENCIA EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Aritmeticas(a,b,Operacion.Operador.POTENCIA,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= EXP MODULO EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Aritmeticas(a,b,Operacion.Operador.MODULO,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= NOT EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Unarias(b,null,Operacion.Operador.NOT,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= EXP OR EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Logicas(a,b,Operacion.Operador.OR,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= EXP AND EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Logicas(a,b,Operacion.Operador.AND,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= EXP MENOR EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Relacional(a,b,Operacion.Operador.MENOR,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP MAYOR EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Relacional(a,b,Operacion.Operador.MAYOR,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= EXP MENOR_I EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Relacional(a,b,Operacion.Operador.MENOR_IGUAL,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= EXP MAYOR_I EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Relacional(a,b,Operacion.Operador.MAYOR_IGUAL,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= EXP IGUAL_IGUAL EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Relacional(a,b,Operacion.Operador.IGUAL_IGUAL,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= EXP DISTINTO EXP 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Relacional(a,b,Operacion.Operador.DISTINTO,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= EXP PREGUNTA EXP DOSPUNTOS EXP 
            {
              Expresion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Ternarias(c,a,b,pleft+1,pright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= PAR_A EXP PAR_C 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Identificador(a,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= NUMERIC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Literal(Double.parseDouble(a.toString()),new TipoExp(Tipos.NUMERIC),aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= STRING 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Literal(a.toString().replace("\"",""),new TipoExp(Tipos.STRING),aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= INTEGER 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Literal(Integer.parseInt(a.toString()),new TipoExp(Tipos.INTEGER),aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= TRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Literal(Boolean.parseBoolean(a.toString()),new TipoExp(Tipos.BOOLEAN),aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= FALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Literal(Boolean.parseBoolean(a.toString()),new TipoExp(Tipos.BOOLEAN),aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= NULO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Nulo(aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= ACCESOARREGLO 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= LLAMADAS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOQUE ::= LLAV_A CUERPOINTERNO LLAV_C 
            {
              LinkedList<Nodo> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BLOQUE ::= LLAV_A LLAV_C 
            {
              LinkedList<Nodo> RESULT =null;
		RESULT=new LinkedList<Nodo>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLOQUE",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LLAMADAS ::= ID PAR_A PAR_C 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new Llamadas(new Identificador(i,ileft+1,iright+1),new LinkedList<Expresion>(),new LinkedList<Expresion>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LLAMADAS ::= ID PAR_A LISTAEXPRESION PAR_C 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Llamadas(new Identificador(i,ileft+1,iright+1),l,new LinkedList<Expresion>());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LLAMADAS ::= ID PAR_A PAR_C LCORCHETES 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> c = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Llamadas(new Identificador(i,ileft+1,iright+1),new LinkedList<Expresion>(),c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LLAMADAS ::= ID PAR_A LISTAEXPRESION PAR_C LCORCHETES 
            {
              Expresion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> c = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Llamadas(new Identificador(i,ileft+1,iright+1),l,c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAMADAS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CONTROLES ::= CONTROL_IF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CONTROLES ::= CONTROL_SWITCH 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROLES",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONTROL_IF ::= IF PAR_A EXP PAR_C BLOQUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new IF(e,b,null,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROL_IF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONTROL_IF ::= IF PAR_A EXP PAR_C BLOQUE LIFS 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new IF(e,b,l,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROL_IF",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LIFS ::= ELSE IF PAR_A EXP PAR_C BLOQUE LIFS 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.addFirst(new ElseIf(e,b,aleft+1,aright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIFS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LIFS ::= ELSE IF PAR_A EXP PAR_C BLOQUE 
            {
              LinkedList<Instruccion> RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Instruccion>a=new LinkedList<>();a.add(new ElseIf(e,b,asleft+1,asright+1));RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIFS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // LIFS ::= ELSE BLOQUE 
            {
              LinkedList<Instruccion> RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String as = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Instruccion>a=new LinkedList<>();a.add(new Else(b,asleft+1,asright+1));RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIFS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONTROL_SWITCH ::= SWITCH PAR_A EXP PAR_C LLAV_A LCASE LLAV_C 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Switch(e,l,ileft+1,iright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROL_SWITCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONTROL_SWITCH ::= SWITCH PAR_A EXP PAR_C LLAV_A LLAV_C 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT=new Switch(e,new LinkedList<Instruccion>(),ileft+1,iright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONTROL_SWITCH",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LCASE ::= CASE EXP DOSPUNTOS CUERPOINTERNO LCASE 
            {
              LinkedList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.addFirst(new Case(e,c,ileft+1,iright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LCASE ::= CASE EXP DOSPUNTOS LCASE 
            {
              LinkedList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instruccion> l = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.addFirst(new Case(e,new LinkedList<Nodo>(),ileft+1,iright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LCASE ::= CASE EXP DOSPUNTOS CUERPOINTERNO 
            {
              LinkedList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Instruccion>lista=new LinkedList<>();lista.addFirst(new Case(e,c,ileft+1,iright+1));RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LCASE ::= CASE EXP DOSPUNTOS 
            {
              LinkedList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		LinkedList<Instruccion>lista=new LinkedList<>();lista.addFirst(new Case(e,new LinkedList<Nodo>(),ileft+1,iright+1));RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // LCASE ::= DEFAULT DOSPUNTOS CUERPOINTERNO 
            {
              LinkedList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> l = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Instruccion>lista=new LinkedList<>();lista.addFirst(new Else(l,ileft+1,iright+1));RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // LCASE ::= DEFAULT DOSPUNTOS 
            {
              LinkedList<Instruccion> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		LinkedList<Instruccion>lista=new LinkedList<>();lista.add(new Else(new LinkedList<Nodo>(),ileft+1,iright+1));RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCASE",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TRANSFERENCIAS ::= BREAK PYCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Break(aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TRANSFERENCIAS ::= BREAK 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Break(aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TRANSFERENCIAS ::= CONTINUE PYCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Continue(aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TRANSFERENCIAS ::= CONTINUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Continue(aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TRANSFERENCIAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ACCESOARREGLO ::= ID LCORCHETES 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Acceso(new Identificador(a,aleft+1,aright+1),l,aleft+1,aright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ACCESOARREGLO",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LCORCHETES ::= COR_A EXP COR_C 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		LinkedList<Expresion>lista=new LinkedList<>();lista.addFirst(new AccesoUnico(e,aleft+1,aright+1));RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCORCHETES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LCORCHETES ::= COR_A EXP COR_C LCORCHETES 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.addFirst(new AccesoUnico(e,aleft+1,aright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCORCHETES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LCORCHETES ::= COR_A COR_A EXP COR_C COR_C 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		LinkedList<Expresion>lista=new LinkedList<>();lista.addFirst(new AccesoDoble(e,aleft+1,aright+1));RESULT=lista;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCORCHETES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LCORCHETES ::= COR_A COR_A EXP COR_C COR_C LCORCHETES 
            {
              LinkedList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.addFirst(new AccesoDoble(e,aleft+1,aright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCORCHETES",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECFUNCION ::= ID IGUAL FUNCTION PAR_A LISTAPARAMETROS PAR_C BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> p = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> s = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DecFuncion(p,new Identificador(i,ileft+1,iright+1),s,gleft+1,gright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECFUNCION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECFUNCION ::= ID IGUAL FUNCTION PAR_A PAR_C BLOQUE 
            {
              Nodo RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String g = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Nodo> s = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new DecFuncion(new LinkedList<Object>(),new Identificador(i,ileft+1,iright+1),s,gleft+1,gright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DECFUNCION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LISTAPARAMETROS ::= LISTAPARAMETROS COMA ID 
            {
              LinkedList<Object> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Object> l = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Identificador(i,ileft+1,iright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LISTAPARAMETROS ::= ID 
            {
              LinkedList<Object> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Object>l=new LinkedList<>();l.add(new Identificador(i,ileft+1,iright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LISTAPARAMETROS ::= ID IGUAL EXP 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Object>l=new LinkedList<>();l.add(new DecAsig(e,new Identificador(a,aleft+1,aright+1),aleft+1,aright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LISTAPARAMETROS ::= LISTAPARAMETROS COMA ID IGUAL EXP 
            {
              LinkedList<Object> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<Object> l = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new  DecAsig(e,new Identificador(a,aleft+1,aright+1),aleft+1,aright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETROS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LISTAEXPRESION ::= LISTAEXPRESION COMA EXP 
            {
              LinkedList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(e);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LISTAEXPRESION ::= EXP 
            {
              LinkedList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Expresion>l=new LinkedList<>();l.add(e);RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LISTAEXPRESION ::= DEFAULT 
            {
              LinkedList<Expresion> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<Expresion>l=new LinkedList<>();l.add(new Default(eleft+1,eright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LISTAEXPRESION ::= LISTAEXPRESION COMA DEFAULT 
            {
              LinkedList<Expresion> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Expresion> l = (LinkedList<Expresion>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		l.add(new Default(ileft+1,iright+1));RESULT=l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESION",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // RETORNOS ::= RETURN PAR_A EXP PAR_C 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Return(e,rleft+1,rright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RETORNOS ::= RETURN PAR_A EXP PAR_C PYCOMA 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT=new Return(e,rleft+1,rright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // RETORNOS ::= RETURN 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new Return(null,rleft+1,rright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // RETORNOS ::= RETURN PYCOMA 
            {
              Nodo RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Return(null,rleft+1,rright+1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("RETORNOS",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
