package AnalizadorA;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Reportes.Errores;
import Reportes.Errores.TipoError;
import java.util.ArrayList;
import Expresion.*;
import Expresion.TipoExp.Tipos;
import AST.*;
import Instruccion.Instruccion;
import Instruccion.Print;
import Objetos.Nulo;
import Operaciones.Aritmeticas;
import Operaciones.Operacion;
import Operaciones.Logicas;
import Operaciones.Relacional;
import Instruccion.DecAsig;
import Expresion.Identificador;
import Operaciones.Ternarias;
import Operaciones.Unarias;
parser code 
{://Codigo visible
    
    public AST ast;
   
    public ArrayList<Errores>listaerrores=new ArrayList<>();
    public void syntax_error(Symbol s){
        Errores nuevo=new Errores(TipoError.SINTACTICO,"Error R de sintaxis "+s.value,s.left+1,s.right+1);
        listaerrores.add(nuevo);
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
       
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Errores nuevo=new Errores(TipoError.SINTACTICO,"Error NR de sintaxis "+s.value,s.left+1,s.right+1);
        //Errores nuevo=new Errores(s.left+1,s.right+1,"Error NR de sintaxis "+s.value,Errores.Terror.SINTACTICO);
        listaerrores.add(nuevo);
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }
:}
action code
{://Codigo de usuario

:}
terminal String LLAV_A,LLAV_C,COR_A,COR_C,PAR_A,PAR_C;
terminal String OR,NOT,AND,MAYOR,MAYOR_I,MENOR,MENOR_I,DISTINTO,IGUAL_IGUAL,MAS,MENOS,DIV,POR,MODULO,POTENCIA,PREGUNTA,DOSPUNTOS;
terminal String ID,NUMERIC,STRING,UMENOS;
terminal String IGUAL,PYCOMA,PRINT;
terminal String INTEGER,NULO,TRUE,FALSE;

non terminal AST INICIO;
non terminal Expresion EXP;
non terminal LinkedList<Nodo>CUERPO;
non terminal String CONTROLES,BLOQUE;
non terminal Instruccion IMPRIMIR,FUNCIONES,ASIGNACION;
precedence right IGUAL;
precedence right PREGUNTA,DOSPUNTOS;
precedence left OR;
precedence left AND;
precedence left IGUAL_IGUAL,DISTINTO;
precedence nonassoc MENOR,MENOR_I,MAYOR_I,MAYOR;
precedence left MAS,MENOS;
precedence left POR,DIV,MODULO,POTENCIA;
precedence right NOT;
precedence right UMENOS;
precedence left COR_A, COR_C;
precedence left PAR_A, PAR_C;



//precedence left PAR_A, TYPEVAR, PAR_C;

//precedence right COR_A, COR_C;

//precedence left POTENCIA;

start with INICIO;

INICIO::= CUERPO:a{:AST arbol=new AST(a);ast=arbol;:};

CUERPO::=ASIGNACION:a{:LinkedList<Nodo>lista=new LinkedList<>();lista.add(a);RESULT=lista;:}
	|CUERPO:c ASIGNACION:a{:c.add(a);RESULT=c;:}
	|CONTROLES
	|CUERPO CONTROLES
	|BLOQUE
	|CUERPO BLOQUE
	|FUNCIONES:a{:LinkedList<Nodo>lista=new LinkedList<>();lista.add(a);RESULT=lista;:}
	|CUERPO:a FUNCIONES:b{:a.add(b);RESULT=a;:}
	;

ASIGNACION::=ID:a IGUAL EXP:e{:RESULT=new DecAsig(e,new Identificador(a,aleft+1,aright+1),aleft+1,aright+1);:}
	|ID:a IGUAL EXP:e PYCOMA{:RESULT=new DecAsig(e,new Identificador(a,aleft+1,aright+1),aleft+1,aright+1);:}
	;
/*
█▀▀ ▀▄▀ █▀█ █▀█ █▀▀ █▀ █ █▀█ █▄░█
██▄ █░█ █▀▀ █▀▄ ██▄ ▄█ █ █▄█ █░▀█
*/
EXP::=
	MENOS:a EXP:b {:RESULT=new Unarias(b,null,Operacion.Operador.RESTA,aleft+1,aright+1);:}%prec UMENOS
	|EXP:a MAS EXP:b{:RESULT=new Aritmeticas(a,b,Operacion.Operador.SUMA,aleft+1,aright+1);:}
	|EXP:a MENOS EXP:b{:RESULT=new Aritmeticas(a,b,Operacion.Operador.RESTA,aleft+1,aright+1);:}
	|EXP:a POR EXP:b{:RESULT=new Aritmeticas(a,b,Operacion.Operador.MULTIPLICACION,aleft+1,aright+1);:}
	|EXP:a DIV EXP:b{:RESULT=new Aritmeticas(a,b,Operacion.Operador.DIVISION,aleft+1,aright+1);:}
	|EXP:a POTENCIA EXP:b{:RESULT=new Aritmeticas(a,b,Operacion.Operador.POTENCIA,aleft+1,aright+1);:}
	|EXP:a MODULO EXP:b{:RESULT=new Aritmeticas(a,b,Operacion.Operador.MODULO,aleft+1,aright+1);:}
	
	|NOT:a EXP:b{:RESULT=new Unarias(b,null,Operacion.Operador.NOT,aleft+1,aright+1);:}
	|EXP:a OR EXP:b{:RESULT=new Logicas(a,b,Operacion.Operador.OR,aleft+1,aright+1);:}
	|EXP:a AND EXP:b{:RESULT=new Logicas(a,b,Operacion.Operador.AND,aleft+1,aright+1);:}
	|EXP:a MENOR EXP:b{:RESULT=new Relacional(a,b,Operacion.Operador.MENOR,aleft+1,aright+1);:}
	|EXP:a MAYOR EXP:b{:RESULT=new Relacional(a,b,Operacion.Operador.MAYOR,aleft+1,aright+1);:}
	|EXP:a MENOR_I EXP:b{:RESULT=new Relacional(a,b,Operacion.Operador.MENOR_IGUAL,aleft+1,aright+1);:}
	|EXP:a MAYOR_I EXP:b{:RESULT=new Relacional(a,b,Operacion.Operador.MAYOR_IGUAL,aleft+1,aright+1);:}
	|EXP:a IGUAL_IGUAL EXP:b{:RESULT=new Relacional(a,b,Operacion.Operador.IGUAL_IGUAL,aleft+1,aright+1);:}
	|EXP:a DISTINTO EXP:b{:RESULT=new Relacional(a,b,Operacion.Operador.DISTINTO,aleft+1,aright+1);:}
	|EXP:c PREGUNTA:p EXP:a DOSPUNTOS EXP:b{:RESULT=new Ternarias(c,a,b,pleft+1,pright+1);:}

	|PAR_A EXP:a PAR_C{:RESULT=a;:}
	|ID:a{:RESULT=new Identificador(a,aleft+1,aright+1);:}
	|NUMERIC:a{:RESULT=new Literal(a,new TipoExp(Tipos.NUMERIC),aleft+1,aright+1);:}
	|STRING:a{:RESULT=new Literal(a.toString().replace("\"",""),new TipoExp(Tipos.STRING),aleft+1,aright+1);:}
	|INTEGER:a{:RESULT=new Literal(a,new TipoExp(Tipos.INTEGER),aleft+1,aright+1);:}
	|TRUE:a{:RESULT=new Literal(a,new TipoExp(Tipos.BOOLEAN),aleft+1,aright+1);:}
	|FALSE:a{:RESULT=new Literal(a,new TipoExp(Tipos.BOOLEAN),aleft+1,aright+1);:}
	|NULO:a{:RESULT=new Nulo(aleft+1,aright+1);:}
	;

/*
░█▀▀▀ ░█─░█ ░█▄─░█ ░█▀▀█ ▀█▀ ░█▀▀▀█ ░█▄─░█ ░█▀▀▀ ░█▀▀▀█ ░█▀▀▀ ░█▀▀▀█ ░█▀▀█ ░█▀▀▀ ░█▀▀█ ▀█▀ ─█▀▀█ ░█─── ░█▀▀▀ ░█▀▀▀█ 
░█▀▀▀ ░█─░█ ░█░█░█ ░█─── ░█─ ░█──░█ ░█░█░█ ░█▀▀▀ ─▀▀▀▄▄ ░█▀▀▀ ─▀▀▀▄▄ ░█▄▄█ ░█▀▀▀ ░█─── ░█─ ░█▄▄█ ░█─── ░█▀▀▀ ─▀▀▀▄▄ 
░█─── ─▀▄▄▀ ░█──▀█ ░█▄▄█ ▄█▄ ░█▄▄▄█ ░█──▀█ ░█▄▄▄ ░█▄▄▄█ ░█▄▄▄ ░█▄▄▄█ ░█─── ░█▄▄▄ ░█▄▄█ ▄█▄ ░█─░█ ░█▄▄█ ░█▄▄▄ ░█▄▄▄█
*/
FUNCIONES::=
	IMPRIMIR:a{:RESULT=a;:}
	|IMPRIMIR:a PYCOMA{:RESULT=a;:}
	;
IMPRIMIR::=
	PRINT:a PAR_A EXP:b PAR_C{:RESULT=new Print(b,aleft+1,aright+1);:}
	|PRINT:a PAR_A PAR_C{:RESULT=new Print(new Literal("",new TipoExp(Tipos.STRING),aleft+1,aright+1),aleft+1,aright+1);:} 
	;