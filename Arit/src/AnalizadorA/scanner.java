/* The following code was generated by JFlex 1.4.1 on 4/1/20 3:31 PM */

package AnalizadorA;
import Reportes.Errores;
import java_cup.runtime.*;
import java.util.ArrayList;
import Reportes.Errores.TipoError;
import java.util.LinkedList;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 4/1/20 3:31 PM from the specification file
 * <tt>src/AnalizadorA/Lexico.jflex</tt>
 */
public class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 47, 44,  0, 47, 45,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    47, 15, 23, 43,  0, 14, 18,  0,  1,  2, 11,  9, 22, 10, 42, 12, 
    41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 21,  8, 17,  7, 16, 20, 
     0, 32, 38, 36, 40, 31, 26, 46, 37, 24, 46, 39, 33, 46, 25, 27, 
    46, 46, 28, 34, 29, 30, 46, 35, 46, 46, 46,  3, 48,  4, 13, 46, 
     0, 32, 38, 36, 40, 31, 26, 46, 37, 24, 46, 39, 33, 46, 25, 27, 
    46, 46, 28, 34, 29, 30, 46, 35, 46, 46, 46,  5, 19,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 46,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 46,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\14\30\1\31\1\30\2\32\1\33\1\34\1\35"+
    "\1\33\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\14\30\1\45\1\30\1\0\3\32\1\46\1\47\1\50"+
    "\1\51\1\52\1\30\1\53\13\30\1\54\3\32\1\55"+
    "\3\30\1\56\1\57\3\30\1\60\2\30\2\0\1\30"+
    "\1\61\2\30\1\62\1\30\1\63\2\30\1\64\1\65"+
    "\4\30\1\66\1\67\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\142\0\142\0\142\0\142\0\142"+
    "\0\142\0\223\0\142\0\142\0\142\0\142\0\142\0\142"+
    "\0\304\0\365\0\u0126\0\u0157\0\142\0\142\0\142\0\142"+
    "\0\142\0\142\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d"+
    "\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\142\0\142\0\142\0\142\0\u0467\0\142\0\142"+
    "\0\142\0\142\0\142\0\u021b\0\u021b\0\u0498\0\u04c9\0\u04fa"+
    "\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682"+
    "\0\u06b3\0\u021b\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\142"+
    "\0\142\0\142\0\142\0\142\0\u07d9\0\u021b\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0715\0\u0a25\0\u0a56\0\u0a87\0\u021b\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u021b\0\u021b\0\u0b4b\0\u0b7c\0\u0bad\0\u021b\0\u0bde"+
    "\0\u0c0f\0\u0a56\0\u0c40\0\u0c71\0\u021b\0\u0ca2\0\u0cd3\0\u021b"+
    "\0\u0d04\0\u021b\0\u0d35\0\u0d66\0\u021b\0\u021b\0\u0d97\0\u0dc8"+
    "\0\u0df9\0\u0e2a\0\u021b\0\u021b\0\u021b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\36\1\41"+
    "\2\36\1\42\1\43\1\44\1\36\1\45\1\36\1\46"+
    "\1\47\1\50\1\51\2\52\1\36\1\52\1\3\23\53"+
    "\1\54\3\53\1\55\24\53\2\54\2\53\1\56\70\0"+
    "\1\57\67\0\1\60\51\0\1\61\60\0\1\62\60\0"+
    "\1\63\101\0\1\36\1\64\1\65\20\36\3\0\1\36"+
    "\32\0\6\36\1\66\14\36\3\0\1\36\32\0\3\36"+
    "\1\67\2\36\1\70\1\36\1\71\12\36\3\0\1\36"+
    "\32\0\23\36\3\0\1\36\32\0\7\36\1\72\13\36"+
    "\3\0\1\36\32\0\4\36\1\73\16\36\3\0\1\36"+
    "\32\0\11\36\1\74\11\36\3\0\1\36\32\0\13\36"+
    "\1\75\7\36\3\0\1\36\32\0\15\36\1\76\5\36"+
    "\3\0\1\36\32\0\3\36\1\77\4\36\1\100\12\36"+
    "\3\0\1\36\32\0\4\36\1\101\16\36\3\0\1\36"+
    "\32\0\3\36\1\102\3\36\1\103\13\36\3\0\1\36"+
    "\53\0\1\47\1\104\36\0\21\36\1\0\1\36\3\0"+
    "\1\36\2\0\13\105\1\106\40\105\1\52\1\107\3\105"+
    "\27\0\1\110\1\0\1\111\2\0\1\112\1\113\22\0"+
    "\1\114\30\0\11\36\1\115\11\36\3\0\1\36\32\0"+
    "\4\36\1\116\16\36\3\0\1\36\32\0\1\36\1\117"+
    "\21\36\3\0\1\36\32\0\11\36\1\120\11\36\3\0"+
    "\1\36\32\0\5\36\1\121\15\36\3\0\1\36\32\0"+
    "\6\36\1\122\14\36\3\0\1\36\32\0\12\36\1\123"+
    "\10\36\3\0\1\36\32\0\1\124\22\36\3\0\1\36"+
    "\32\0\1\125\22\36\3\0\1\36\32\0\1\36\1\126"+
    "\21\36\3\0\1\36\32\0\12\36\1\127\10\36\3\0"+
    "\1\36\32\0\7\36\1\130\13\36\3\0\1\36\32\0"+
    "\2\36\1\131\20\36\3\0\1\36\53\0\1\132\7\0"+
    "\54\105\1\52\1\107\3\105\13\106\1\133\40\106\1\134"+
    "\1\135\3\106\54\0\1\52\34\0\11\36\1\136\11\36"+
    "\3\0\1\36\32\0\14\36\1\137\6\36\3\0\1\36"+
    "\32\0\12\36\1\140\10\36\3\0\1\36\32\0\6\36"+
    "\1\141\14\36\3\0\1\36\32\0\7\36\1\142\13\36"+
    "\3\0\1\36\32\0\7\36\1\143\13\36\3\0\1\36"+
    "\32\0\5\36\1\144\15\36\3\0\1\36\32\0\11\36"+
    "\1\145\11\36\3\0\1\36\32\0\5\36\1\146\15\36"+
    "\3\0\1\36\32\0\7\36\1\147\13\36\3\0\1\36"+
    "\32\0\10\36\1\150\12\36\3\0\1\36\32\0\10\36"+
    "\1\151\12\36\3\0\1\36\2\0\13\106\1\133\37\106"+
    "\1\105\1\134\1\135\3\106\13\152\1\153\60\152\1\153"+
    "\40\152\1\134\4\152\30\0\5\36\1\154\15\36\3\0"+
    "\1\36\32\0\7\36\1\155\13\36\3\0\1\36\32\0"+
    "\4\36\1\156\16\36\3\0\1\36\32\0\14\36\1\157"+
    "\6\36\3\0\1\36\32\0\7\36\1\160\13\36\3\0"+
    "\1\36\32\0\1\161\22\36\3\0\1\36\32\0\17\36"+
    "\1\162\3\36\3\0\1\36\32\0\6\36\1\163\14\36"+
    "\3\0\1\36\2\0\13\152\1\153\37\152\1\52\5\152"+
    "\30\0\1\164\22\36\3\0\1\36\32\0\1\36\1\165"+
    "\21\36\3\0\1\36\32\0\15\36\1\166\5\36\3\0"+
    "\1\36\32\0\1\36\1\167\21\36\3\0\1\36\32\0"+
    "\11\36\1\170\11\36\3\0\1\36\32\0\3\36\1\171"+
    "\17\36\3\0\1\36\32\0\6\36\1\172\14\36\3\0"+
    "\1\36\32\0\5\36\1\173\15\36\3\0\1\36\32\0"+
    "\1\36\1\174\21\36\3\0\1\36\32\0\7\36\1\175"+
    "\13\36\3\0\1\36\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3675];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\7\11\1\1\6\11\4\1\6\11\17\1\4\11"+
    "\1\1\5\11\20\1\1\0\3\1\5\11\35\1\2\0"+
    "\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	public LinkedList<Errores>listaerrores=new LinkedList<>();;
	 StringBuilder NuevoString = new StringBuilder();
    char NuevoChar;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 39: 
          { NuevoString.append('\n');
          }
        case 57: break;
        case 32: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.DISTINTO,yyline,yycolumn,yytext());
          }
        case 58: break;
        case 21: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.DOSPUNTOS,yyline,yycolumn,yytext());
          }
        case 59: break;
        case 54: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.DEFAULT,yyline,yycolumn,yytext());
          }
        case 60: break;
        case 31: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.MODULO,yyline,yycolumn,yytext());
          }
        case 61: break;
        case 24: 
          { System.out.println("Token ID "+yytext()+" reconocido"); return new Symbol(sym.ID,yyline,yycolumn,yytext());
          }
        case 62: break;
        case 50: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.WHILE,yyline,yycolumn,yytext());
          }
        case 63: break;
        case 23: 
          { yybegin(STRING); NuevoString.setLength(0);
          }
        case 64: break;
        case 3: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.PAR_C,yyline,yycolumn,yytext());
          }
        case 65: break;
        case 1: 
          { Errores nuevo=new Errores(TipoError.LEXICO,"Error con el token: "+yytext(),yyline+1,yycolumn+1);
        listaerrores.add(nuevo);
        String errLex = "Error léxico : '"+yytext()+"' en la línea: "+(yyline+1)+" y columna: "+(yycolumn+1);
        System.out.println(errLex);
          }
        case 66: break;
        case 30: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.IGUAL_IGUAL,yyline,yycolumn,yytext());
          }
        case 67: break;
        case 56: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.CONTINUE,yyline,yycolumn,yytext());
          }
        case 68: break;
        case 13: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.DIV,yyline,yycolumn,yytext());
          }
        case 69: break;
        case 14: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.POTENCIA,yyline,yycolumn,yytext());
          }
        case 70: break;
        case 37: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.DO,yyline,yycolumn,yytext());
          }
        case 71: break;
        case 29: 
          { yybegin(YYINITIAL); return new Symbol(sym.STRING, NuevoString.toString());
          }
        case 72: break;
        case 35: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.IN,yyline,yycolumn,yytext());
          }
        case 73: break;
        case 5: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.COR_C,yyline,yycolumn,yytext());
          }
        case 74: break;
        case 9: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.PYCOMA,yyline,yycolumn,yytext());
          }
        case 75: break;
        case 46: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.TRUE,yyline,yycolumn,yytext());
          }
        case 76: break;
        case 20: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.PREGUNTA,yyline,yycolumn,yytext());
          }
        case 77: break;
        case 41: 
          { NuevoString.append('\t');
          }
        case 78: break;
        case 18: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.AND,yyline,yycolumn,yytext());
          }
        case 79: break;
        case 15: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.NOT,yyline,yycolumn,yytext());
          }
        case 80: break;
        case 47: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.ELSE,yyline,yycolumn,yytext());
          }
        case 81: break;
        case 26: 
          { /*ignorado*/
          }
        case 82: break;
        case 7: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.LLAV_C,yyline,yycolumn,yytext());
          }
        case 83: break;
        case 2: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.PAR_A,yyline,yycolumn,yytext());
          }
        case 84: break;
        case 8: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.IGUAL,yyline,yycolumn,yytext());
          }
        case 85: break;
        case 25: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.INTEGER,yyline,yycolumn,yytext());
          }
        case 86: break;
        case 55: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.FUNCTION,yyline,yycolumn,yytext());
          }
        case 87: break;
        case 45: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.NULO,yyline,yycolumn,yytext());
          }
        case 88: break;
        case 42: 
          { NuevoString.append("\\");
          }
        case 89: break;
        case 17: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.MENOR,yyline,yycolumn,yytext());
          }
        case 90: break;
        case 12: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.POR,yyline,yycolumn,yytext());
          }
        case 91: break;
        case 40: 
          { NuevoString.append('\r');
          }
        case 92: break;
        case 22: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.COMA,yyline,yycolumn,yytext());
          }
        case 93: break;
        case 19: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.OR,yyline,yycolumn,yytext());
          }
        case 94: break;
        case 33: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.MAYOR_I,yyline,yycolumn,yytext());
          }
        case 95: break;
        case 28: 
          { yybegin(YYINITIAL);
                                   System.out.println("String sin finalizar." + yyline + yycolumn);
          }
        case 96: break;
        case 48: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.CASE,yyline,yycolumn,yytext());
          }
        case 97: break;
        case 34: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.MENOR_I,yyline,yycolumn,yytext());
          }
        case 98: break;
        case 49: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.FALSE,yyline,yycolumn,yytext());
          }
        case 99: break;
        case 38: 
          { NuevoString.append('\"');
          }
        case 100: break;
        case 4: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.COR_A,yyline,yycolumn,yytext());
          }
        case 101: break;
        case 27: 
          { NuevoString.append(yytext());
          }
        case 102: break;
        case 51: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.BREAK,yyline,yycolumn,yytext());
          }
        case 103: break;
        case 53: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.SWITCH,yyline,yycolumn,yytext());
          }
        case 104: break;
        case 10: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.MAS,yyline,yycolumn,yytext());
          }
        case 105: break;
        case 43: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.FOR,yyline,yycolumn,yytext());
          }
        case 106: break;
        case 36: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.IF,yyline,yycolumn,yytext());
          }
        case 107: break;
        case 16: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.MAYOR,yyline,yycolumn,yytext());
          }
        case 108: break;
        case 6: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.LLAV_A,yyline,yycolumn,yytext());
          }
        case 109: break;
        case 11: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.MENOS,yyline,yycolumn,yytext());
          }
        case 110: break;
        case 52: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.RETURN,yyline,yycolumn,yytext());
          }
        case 111: break;
        case 44: 
          { System.out.println("Token "+yytext()+" reconocido"); return new Symbol(sym.NUMERIC,yyline,yycolumn,yytext());
          }
        case 112: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
